---
// ==========================================================================
// MultiBPO MVP Frontend - P√°gina de Cadastro v3 Aprimorada
// Mini-Fase MVP 3 - Valida√ß√µes em tempo real e formata√ß√£o autom√°tica
// 
// Cadastro com valida√ß√µes brasileiras, formata√ß√£o autom√°tica de CPF,
// confirma√ß√£o de senha e integra√ß√£o completa com novos sistemas
// ==========================================================================

import Layout from '../layouts/layout_principal.astro';

// Meta dados da p√°gina
const pageTitle = "Cadastro MVP v3";
const pageDescription = "Criar conta no MultiBPO MVP - Sistema aprimorado com valida√ß√µes brasileiras";
---

<Layout 
  title={pageTitle}
  description={pageDescription}
  showHeader={true}
  showFooter={true}
  requireAuth={false}
>
  <!-- =================================================================== -->
  <!-- CONTAINER PRINCIPAL -->
  <!-- =================================================================== -->
  <div class="min-h-screen bg-gradient-multibpo flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
    
    <!-- ================================================================= -->
    <!-- CARD DE CADASTRO APRIMORADO -->
    <!-- ================================================================= -->
    <div class="max-w-2xl w-full bg-white rounded-multibpo shadow-multibpo p-8 animate-fade-in">
      
      <!-- Header do Card -->
      <div class="text-center mb-8">
        <div class="mx-auto w-16 h-16 bg-gradient-multibpo rounded-multibpo flex items-center justify-center mb-4">
          <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z" />
          </svg>
        </div>
        <h1 class="text-header-lg font-bold text-contabil-azul mb-2">
          Criar Conta MVP v3
        </h1>
        <p class="text-contabil-texto">
          Cadastre-se no MultiBPO com sistema aprimorado
        </p>
        
        <!-- Badge de vers√£o -->
        <div class="mt-3">
          <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
            üáßüá∑ Valida√ß√µes Brasileiras
          </span>
        </div>
      </div>

      <!-- ================================================================= -->
      <!-- FORMUL√ÅRIO DE CADASTRO APRIMORADO -->
      <!-- ================================================================= -->
      <form id="form-cadastro-v3" class="space-y-6" novalidate>
        
        <!-- Grid para Nome e Sobrenome -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <!-- Primeiro Nome -->
          <div>
            <label for="first_name" class="block text-sm font-medium text-contabil-azul mb-2">
              Primeiro Nome *
            </label>
            <div class="relative">
              <input
                type="text"
                id="first_name"
                name="first_name"
                required
                autocomplete="given-name"
                class="form-input w-full px-4 py-3 pr-10 border border-gray-300 rounded-input focus:ring-2 focus:ring-azul-secundario focus:border-transparent transition-all duration-200"
                placeholder="Jo√£o"
                data-validation="name"
                maxlength="50"
              />
              <div class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                <div id="first_name-validation-icon" class="hidden"></div>
              </div>
            </div>
            <div id="first_name-feedback" class="mt-1 text-sm hidden"></div>
          </div>

          <!-- Sobrenome -->
          <div>
            <label for="last_name" class="block text-sm font-medium text-contabil-azul mb-2">
              Sobrenome *
            </label>
            <div class="relative">
              <input
                type="text"
                id="last_name"
                name="last_name"
                required
                autocomplete="family-name"
                class="form-input w-full px-4 py-3 pr-10 border border-gray-300 rounded-input focus:ring-2 focus:ring-azul-secundario focus:border-transparent transition-all duration-200"
                placeholder="Silva"
                data-validation="name"
                maxlength="50"
              />
              <div class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                <div id="last_name-validation-icon" class="hidden"></div>
              </div>
            </div>
            <div id="last_name-feedback" class="mt-1 text-sm hidden"></div>
          </div>
        </div>

        <!-- Email -->
        <div>
          <label for="email" class="block text-sm font-medium text-contabil-azul mb-2">
            Email Profissional *
          </label>
          <div class="relative">
            <input
              type="email"
              id="email"
              name="email"
              required
              autocomplete="email"
              class="form-input w-full px-4 py-3 pr-10 border border-gray-300 rounded-input focus:ring-2 focus:ring-azul-secundario focus:border-transparent transition-all duration-200"
              placeholder="joao@escritorio.com.br"
              data-validation="email"
            />
            <div class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
              <div id="email-validation-icon" class="hidden"></div>
            </div>
          </div>
          <div id="email-feedback" class="mt-1 text-sm hidden"></div>
          <div class="mt-1 text-xs text-gray-500">
            Use seu email profissional para comunica√ß√µes cont√°beis
          </div>
        </div>

        <!-- CPF com Formata√ß√£o Autom√°tica -->
        <div>
          <label for="cpf" class="block text-sm font-medium text-contabil-azul mb-2">
            CPF *
          </label>
          <div class="relative">
            <input
              type="text"
              id="cpf"
              name="cpf"
              required
              autocomplete="off"
              class="form-input w-full px-4 py-3 pr-10 border border-gray-300 rounded-input focus:ring-2 focus:ring-azul-secundario focus:border-transparent transition-all duration-200 font-mono"
              placeholder="000.000.000-00"
              data-validation="cpf"
              maxlength="14"
              inputmode="numeric"
            />
            <div class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
              <div id="cpf-validation-icon" class="hidden"></div>
            </div>
          </div>
          <div id="cpf-feedback" class="mt-1 text-sm hidden"></div>
          <div class="mt-1 text-xs text-gray-500">
            Formata√ß√£o autom√°tica - apenas n√∫meros s√£o necess√°rios
          </div>
        </div>

        <!-- Telefone (Opcional) -->
        <div>
          <label for="telefone" class="block text-sm font-medium text-contabil-azul mb-2">
            Telefone <span class="text-gray-400">(opcional)</span>
          </label>
          <div class="relative">
            <input
              type="tel"
              id="telefone"
              name="telefone"
              autocomplete="tel"
              class="form-input w-full px-4 py-3 pr-10 border border-gray-300 rounded-input focus:ring-2 focus:ring-azul-secundario focus:border-transparent transition-all duration-200 font-mono"
              placeholder="(11) 99999-9999"
              data-validation="phone"
              maxlength="15"
              inputmode="tel"
            />
            <div class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
              <div id="telefone-validation-icon" class="hidden"></div>
            </div>
          </div>
          <div id="telefone-feedback" class="mt-1 text-sm hidden"></div>
        </div>

        <!-- Grid para Senhas -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <!-- Senha -->
          <div>
            <label for="password" class="block text-sm font-medium text-contabil-azul mb-2">
              Senha *
            </label>
            <div class="relative">
              <input
                type="password"
                id="password"
                name="password"
                required
                autocomplete="new-password"
                class="form-input w-full px-4 py-3 pr-20 border border-gray-300 rounded-input focus:ring-2 focus:ring-azul-secundario focus:border-transparent transition-all duration-200"
                placeholder="M√≠nimo 8 caracteres"
                data-validation="password"
                minlength="8"
              />
              <div class="absolute inset-y-0 right-0 flex items-center">
                <div id="password-validation-icon" class="hidden mr-2"></div>
                <button
                  type="button"
                  id="toggle-password"
                  class="pr-3 flex items-center text-gray-400 hover:text-contabil-azul transition-colors duration-200 focus:outline-none"
                  tabindex="-1"
                  aria-label="Mostrar/ocultar senha"
                >
                  <svg id="eye-closed" class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21" />
                  </svg>
                  <svg id="eye-open" class="h-5 w-5 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                  </svg>
                </button>
              </div>
            </div>
            <div id="password-feedback" class="mt-1 text-sm hidden"></div>
          </div>

          <!-- Confirmar Senha -->
          <div>
            <label for="password_confirm" class="block text-sm font-medium text-contabil-azul mb-2">
              Confirmar Senha *
            </label>
            <div class="relative">
              <input
                type="password"
                id="password_confirm"
                name="password_confirm"
                required
                autocomplete="new-password"
                class="form-input w-full px-4 py-3 pr-20 border border-gray-300 rounded-input focus:ring-2 focus:ring-azul-secundario focus:border-transparent transition-all duration-200"
                placeholder="Repita a senha"
                data-validation="confirm_password"
              />
              <div class="absolute inset-y-0 right-0 flex items-center">
                <div id="password_confirm-validation-icon" class="hidden mr-2"></div>
                <button
                  type="button"
                  id="toggle-password-confirm"
                  class="pr-3 flex items-center text-gray-400 hover:text-contabil-azul transition-colors duration-200 focus:outline-none"
                  tabindex="-1"
                  aria-label="Mostrar/ocultar confirma√ß√£o"
                >
                  <svg id="eye-closed-confirm" class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21" />
                  </svg>
                  <svg id="eye-open-confirm" class="h-5 w-5 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                  </svg>
                </button>
              </div>
            </div>
            <div id="password_confirm-feedback" class="mt-1 text-sm hidden"></div>
          </div>
        </div>

        <!-- Indicador de For√ßa da Senha -->
        <div id="password-strength" class="hidden">
          <div class="text-sm font-medium text-gray-700 mb-2">For√ßa da senha:</div>
          <div class="w-full bg-gray-200 rounded-full h-2">
            <div id="password-strength-bar" class="h-2 rounded-full transition-all duration-300" style="width: 0%;"></div>
          </div>
          <div id="password-strength-text" class="text-xs text-gray-600 mt-1"></div>
        </div>

        <!-- =============================================================== -->
        <!-- INDICADOR DE STATUS DO FORMUL√ÅRIO -->
        <!-- =============================================================== -->
        <div id="form-status" class="hidden">
          <div class="bg-blue-50 border border-blue-200 rounded-lg p-3">
            <div class="flex items-center">
              <svg class="w-5 h-5 text-blue-400 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              <span id="form-status-message" class="text-sm text-blue-800"></span>
            </div>
          </div>
        </div>

        <!-- =============================================================== -->
        <!-- TERMOS E CONDI√á√ïES -->
        <!-- =============================================================== -->
        <div class="flex items-start">
          <input
            id="aceitar-termos"
            name="aceitar-termos"
            type="checkbox"
            required
            class="h-4 w-4 text-azul-secundario focus:ring-azul-secundario border-gray-300 rounded transition-colors duration-200 mt-1"
          />
          <label for="aceitar-termos" class="ml-3 text-sm text-contabil-texto">
            Aceito os 
            <a href="#" class="text-contabil-azul hover:text-azul-secundario font-medium" onclick="showTerms()">
              termos de uso
            </a> 
            e 
            <a href="#" class="text-contabil-azul hover:text-azul-secundario font-medium" onclick="showPrivacy()">
              pol√≠tica de privacidade
            </a> 
            do MultiBPO MVP
          </label>
        </div>

        <!-- =============================================================== -->
        <!-- BOT√ÉO DE CADASTRO APRIMORADO -->
        <!-- =============================================================== -->
        <div>
          <button
            type="submit"
            id="btn-cadastro-v3"
            class="w-full bg-gradient-multibpo text-white font-semibold py-3 px-4 rounded-button hover:shadow-button focus:outline-none focus:ring-2 focus:ring-azul-secundario focus:ring-offset-2 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none"
            disabled
          >
            <span id="btn-text" class="flex items-center justify-center">
              <svg id="btn-icon-normal" class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z" />
              </svg>
              Criar Conta Gr√°tis
            </span>
            <span id="btn-loading" class="hidden flex items-center justify-center">
              <svg class="animate-spin h-5 w-5 mr-2" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4" fill="none"/>
                <path class="opacity-75" fill="currentColor" d="m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"/>
              </svg>
              <span id="loading-text">Criando conta...</span>
            </span>
          </button>
        </div>

        <!-- =============================================================== -->
        <!-- RESUMO DE VALIDA√á√ÉO -->
        <!-- =============================================================== -->
        <div id="validation-summary" class="hidden bg-gray-50 border border-gray-200 rounded-lg p-4">
          <h4 class="text-sm font-medium text-gray-900 mb-2">Status dos campos:</h4>
          <div id="validation-summary-content" class="space-y-1 text-xs"></div>
        </div>

        <!-- =============================================================== -->
        <!-- LINK PARA LOGIN -->
        <!-- =============================================================== -->
        <div class="text-center">
          <p class="text-contabil-texto">
            J√° possui uma conta? 
            <a 
              href="/login" 
              class="text-contabil-azul hover:text-azul-secundario font-medium transition-colors duration-200 focus:outline-none focus:underline"
            >
              Fazer login
            </a>
          </p>
        </div>

        <!-- =============================================================== -->
        <!-- INFORMA√á√ïES DE SEGURAN√áA -->
        <!-- =============================================================== -->
        <div class="mt-8 pt-6 border-t border-gray-200">
          <div class="text-center">
            <p class="text-xs text-gray-500 mb-3">MultiBPO MVP v3 - Cadastro Seguro e Validado</p>
            <div class="grid grid-cols-2 md:grid-cols-4 gap-2 text-xs text-gray-400">
              <span class="flex items-center justify-center">
                <span class="w-2 h-2 bg-green-400 rounded-full mr-1"></span>
                CPF Validado
              </span>
              <span class="flex items-center justify-center">
                <span class="w-2 h-2 bg-blue-400 rounded-full mr-1"></span>
                Email √önico
              </span>
              <span class="flex items-center justify-center">
                <span class="w-2 h-2 bg-purple-400 rounded-full mr-1"></span>
                Senha Segura
              </span>
              <span class="flex items-center justify-center">
                <span class="w-2 h-2 bg-red-400 rounded-full mr-1"></span>
                LGPD Compliant
              </span>
            </div>
          </div>
        </div>
      </form>
    </div>
  </div>
</Layout>

<!-- ===================================================================== -->
<!-- SCRIPTS DA P√ÅGINA V3 -->
<!-- ===================================================================== -->
<script>
  // Importar sistemas integrados
  import { apiClientV3 } from '../utils/api_client_v3.js';
  import { Validators, globalValidator } from '../utils/validators.js';
  import { showSuccess, showError, showWarning } from '../utils/notification_system.js';
  import { enforceRoute } from '../utils/route_protection.js';

  // Estado global do formul√°rio
  let formState = {
    isValid: false,
    fieldsValid: {
      first_name: false,
      last_name: false,
      email: false,
      cpf: false,
      telefone: true, // Opcional - inicia como v√°lido
      password: false,
      password_confirm: false,
      'aceitar-termos': false
    },
    isSubmitting: false,
    hasAttemptedSubmit: false,
    passwordStrength: 0
  };

  // =====================================================================
  // INICIALIZA√á√ÉO DA P√ÅGINA
  // =====================================================================
  document.addEventListener('DOMContentLoaded', async function() {
    try {
      // Verificar prote√ß√£o de rota
      await enforceRoute({ preventRedirect: false });
      
      // Configurar valida√ß√µes em tempo real
      setupRealtimeValidations();
      
      // Configurar event listeners
      setupEventListeners();
      
      // Configurar formata√ß√£o autom√°tica
      setupAutoFormatting();
      
      // Foco inicial
      document.getElementById('first_name')?.focus();
      
      console.log('[Cadastro v3] P√°gina inicializada com sucesso');
      
    } catch (error) {
      console.error('[Cadastro v3] Erro na inicializa√ß√£o:', error);
      showError('Erro ao carregar a p√°gina. Recarregue e tente novamente.');
    }
  });

  // =====================================================================
  // CONFIGURAR VALIDA√á√ïES EM TEMPO REAL
  // =====================================================================
  function setupRealtimeValidations() {
    try {
      // Configurar valida√ß√µes para formul√°rio de cadastro
      Validators.setupCadastroForm('form-cadastro-v3');
      
      // Configurar listeners customizados
      setupCustomValidationFeedback();
      
      console.log('[Cadastro v3] Valida√ß√µes configuradas');
      
    } catch (error) {
      console.error('[Cadastro v3] Erro ao configurar valida√ß√µes:', error);
      setupBasicValidations();
    }
  }

  // =====================================================================
  // FEEDBACK VISUAL CUSTOMIZADO
  // =====================================================================
  function setupCustomValidationFeedback() {
    const fields = ['first_name', 'last_name', 'email', 'cpf', 'telefone', 'password', 'password_confirm'];

    fields.forEach(fieldName => {
      const field = document.getElementById(fieldName);
      if (field) {
        field.addEventListener('input', () => updateFieldValidation(fieldName));
        field.addEventListener('blur', () => updateFieldValidation(fieldName));
      }
    });

    // Listener especial para checkbox de termos
    const termosCheckbox = document.getElementById('aceitar-termos');
    if (termosCheckbox) {
      termosCheckbox.addEventListener('change', () => updateFieldValidation('aceitar-termos'));
    }
  }

  // =====================================================================
  // ATUALIZAR VALIDA√á√ÉO DE CAMPO
  // =====================================================================
  function updateFieldValidation(fieldName) {
    const field = document.getElementById(fieldName);
    const value = field.type === 'checkbox' ? field.checked : field.value.trim();
    let isValid = false;

    // Valida√ß√£o espec√≠fica por campo
    switch (fieldName) {
      case 'first_name':
      case 'last_name':
        isValid = value && value.length >= 2 && /^[a-zA-Z√Ä-√ø\s]+$/.test(value);
        break;
      case 'email':
        isValid = value && /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value);
        break;
      case 'cpf':
        isValid = value && validateCPF(value);
        break;
      case 'telefone':
        // Campo opcional - v√°lido se vazio ou com formato correto
        isValid = !value || /^(\+55\s?)?(\(\d{2}\)\s?|\d{2}\s?)?\d{4,5}-?\d{4}$/.test(value);
        break;
      case 'password':
        isValid = value && value.length >= 8;
        updatePasswordStrength(value);
        // Re-validar confirma√ß√£o se j√° foi preenchida
        const confirmField = document.getElementById('password_confirm');
        if (confirmField.value) {
          updateFieldValidation('password_confirm');
        }
        break;
      case 'password_confirm':
        const passwordValue = document.getElementById('password').value;
        isValid = value && value === passwordValue;
        break;
      case 'aceitar-termos':
        isValid = value === true;
        break;
    }

    // Atualizar estado
    formState.fieldsValid[fieldName] = isValid;
    
    // Atualizar UI
    if (fieldName !== 'aceitar-termos') {
      updateFieldUI(fieldName, isValid, field.value);
    }
    
    // Atualizar bot√£o e resumo
    updateSubmitButton();
    updateValidationSummary();
  }

  // =====================================================================
  // VALIDA√á√ÉO DE CPF
  // =====================================================================
  function validateCPF(cpf) {
    const cleanCPF = cpf.replace(/\D/g, '');
    
    if (cleanCPF.length !== 11) return false;
    if (/^(\d)\1{10}$/.test(cleanCPF)) return false;

    let sum = 0;
    for (let i = 0; i < 9; i++) {
      sum += parseInt(cleanCPF.charAt(i)) * (10 - i);
    }
    let digit1 = (sum * 10) % 11;
    if (digit1 === 10) digit1 = 0;

    if (digit1 !== parseInt(cleanCPF.charAt(9))) return false;

    sum = 0;
    for (let i = 0; i < 10; i++) {
      sum += parseInt(cleanCPF.charAt(i)) * (11 - i);
    }
    let digit2 = (sum * 10) % 11;
    if (digit2 === 10) digit2 = 0;

    return digit2 === parseInt(cleanCPF.charAt(10));
  }

  // =====================================================================
  // ATUALIZAR FOR√áA DA SENHA
  // =====================================================================
  function updatePasswordStrength(password) {
    const strengthContainer = document.getElementById('password-strength');
    const strengthBar = document.getElementById('password-strength-bar');
    const strengthText = document.getElementById('password-strength-text');

    if (!password) {
      strengthContainer.classList.add('hidden');
      formState.passwordStrength = 0;
      return;
    }

    strengthContainer.classList.remove('hidden');

    let strength = 0;
    let feedback = [];

    // Crit√©rios de for√ßa
    if (password.length >= 8) strength += 20;
    else feedback.push('m√≠nimo 8 caracteres');

    if (/[a-z]/.test(password)) strength += 20;
    else feedback.push('letra min√∫scula');

    if (/[A-Z]/.test(password)) strength += 20;
    else feedback.push('letra mai√∫scula');

    if (/\d/.test(password)) strength += 20;
    else feedback.push('n√∫mero');

    if (/[^a-zA-Z0-9]/.test(password)) strength += 20;
    else feedback.push('s√≠mbolo especial');

    formState.passwordStrength = strength;

    // Atualizar barra visual
    strengthBar.style.width = `${strength}%`;

    // Cores baseadas na for√ßa
    if (strength < 40) {
      strengthBar.className = 'h-2 rounded-full transition-all duration-300 bg-red-500';
      strengthText.textContent = `Fraca - Adicione: ${feedback.join(', ')}`;
      strengthText.className = 'text-xs text-red-600 mt-1';
    } else if (strength < 80) {
      strengthBar.className = 'h-2 rounded-full transition-all duration-300 bg-yellow-500';
      strengthText.textContent = `M√©dia - Adicione: ${feedback.join(', ')}`;
      strengthText.className = 'text-xs text-yellow-600 mt-1';
    } else {
      strengthBar.className = 'h-2 rounded-full transition-all duration-300 bg-green-500';
      strengthText.textContent = 'Forte - Senha segura!';
      strengthText.className = 'text-xs text-green-600 mt-1';
    }
  }

  // =====================================================================
  // ATUALIZAR UI DO CAMPO
  // =====================================================================
  function updateFieldUI(fieldName, isValid, value) {
    const field = document.getElementById(fieldName);
    const iconContainer = document.getElementById(`${fieldName}-validation-icon`);
    const feedbackContainer = document.getElementById(`${fieldName}-feedback`);

    if (!field || !iconContainer || !feedbackContainer) return;

    // Limpar estados anteriores
    field.classList.remove('border-green-500', 'border-red-500', 'focus:ring-green-500', 'focus:ring-red-500');
    iconContainer.classList.add('hidden');
    feedbackContainer.classList.add('hidden');

    if (value.length > 0) {
      if (isValid) {
        // Estado v√°lido
        field.classList.add('border-green-500', 'focus:ring-green-500');
        iconContainer.innerHTML = `
          <svg class="w-5 h-5 text-green-500" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
          </svg>
        `;
        iconContainer.classList.remove('hidden');
        
        // Feedback positivo
        feedbackContainer.className = 'mt-1 text-sm text-green-600';
        feedbackContainer.textContent = getPositiveFeedback(fieldName);
        feedbackContainer.classList.remove('hidden');
      } else {
        // Estado inv√°lido
        field.classList.add('border-red-500', 'focus:ring-red-500');
        iconContainer.innerHTML = `
          <svg class="w-5 h-5 text-red-500" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"/>
          </svg>
        `;
        iconContainer.classList.remove('hidden');
        
        // Feedback negativo
        feedbackContainer.className = 'mt-1 text-sm text-red-600';
        feedbackContainer.textContent = getNegativeFeedback(fieldName);
        feedbackContainer.classList.remove('hidden');
      }
    } else {
      // Estado neutro
      field.classList.add('border-gray-300');
    }
  }

  // =====================================================================
  // MENSAGENS DE FEEDBACK
  // =====================================================================
  function getPositiveFeedback(fieldName) {
    const messages = {
      first_name: 'Nome v√°lido',
      last_name: 'Sobrenome v√°lido',
      email: 'Email v√°lido',
      cpf: 'CPF v√°lido',
      telefone: 'Telefone v√°lido',
      password: 'Senha preenchida',
      password_confirm: 'Senhas coincidem'
    };
    return messages[fieldName] || 'V√°lido';
  }

  function getNegativeFeedback(fieldName) {
    const messages = {
      first_name: 'Nome deve ter pelo menos 2 caracteres',
      last_name: 'Sobrenome deve ter pelo menos 2 caracteres',
      email: 'Email inv√°lido',
      cpf: 'CPF inv√°lido',
      telefone: 'Formato de telefone inv√°lido',
      password: 'Senha deve ter pelo menos 8 caracteres',
      password_confirm: 'Senhas n√£o coincidem'
    };
    return messages[fieldName] || 'Campo inv√°lido';
  }

  // =====================================================================
  // ATUALIZAR BOT√ÉO DE SUBMIT
  // =====================================================================
  function updateSubmitButton() {
    const btn = document.getElementById('btn-cadastro-v3');
    const allValid = Object.values(formState.fieldsValid).every(valid => valid);
    
    formState.isValid = allValid;
    
    if (allValid && !formState.isSubmitting) {
      btn.disabled = false;
      btn.classList.remove('opacity-50', 'cursor-not-allowed');
      btn.classList.add('hover:shadow-button', 'transform', 'hover:scale-105');
    } else {
      btn.disabled = true;
      btn.classList.add('opacity-50', 'cursor-not-allowed');
      btn.classList.remove('hover:shadow-button', 'transform', 'hover:scale-105');
    }
  }

  // =====================================================================
  // ATUALIZAR RESUMO DE VALIDA√á√ÉO
  // =====================================================================
  function updateValidationSummary() {
    const summaryContainer = document.getElementById('validation-summary');
    const summaryContent = document.getElementById('validation-summary-content');
    
    if (!formState.hasAttemptedSubmit) {
      summaryContainer.classList.add('hidden');
      return;
    }

    const fieldLabels = {
      first_name: 'Nome',
      last_name: 'Sobrenome',
      email: 'Email',
      cpf: 'CPF',
      telefone: 'Telefone',
      password: 'Senha',
      password_confirm: 'Confirma√ß√£o',
      'aceitar-termos': 'Termos'
    };

    const summaryItems = Object.entries(formState.fieldsValid).map(([field, isValid]) => {
      const icon = isValid ? '‚úÖ' : '‚ùå';
      const label = fieldLabels[field] || field;
      return `<div class="flex items-center"><span class="mr-2">${icon}</span><span>${label}</span></div>`;
    });

    summaryContent.innerHTML = summaryItems.join('');
    summaryContainer.classList.remove('hidden');
  }

  // =====================================================================
  // CONFIGURAR FORMATA√á√ÉO AUTOM√ÅTICA
  // =====================================================================
  function setupAutoFormatting() {
    // CPF
    const cpfField = document.getElementById('cpf');
    if (cpfField) {
      cpfField.addEventListener('input', function() {
        formatCPF(this);
        updateFieldValidation('cpf');
      });
    }

    // Telefone
    const telefoneField = document.getElementById('telefone');
    if (telefoneField) {
      telefoneField.addEventListener('input', function() {
        formatPhone(this);
        updateFieldValidation('telefone');
      });
    }
  }

  // =====================================================================
  // FORMATA√á√ÉO DE CPF
  // =====================================================================
  function formatCPF(field) {
    let value = field.value.replace(/\D/g, '');
    value = value.replace(/(\d{3})(\d)/, '$1.$2');
    value = value.replace(/(\d{3})(\d)/, '$1.$2');
    value = value.replace(/(\d{3})(\d{1,2})$/, '$1-$2');
    field.value = value;
  }

  // =====================================================================
  // FORMATA√á√ÉO DE TELEFONE
  // =====================================================================
  function formatPhone(field) {
    let value = field.value.replace(/\D/g, '');
    
    if (value.length <= 10) {
      // Telefone fixo: (11) 1234-5678
      value = value.replace(/(\d{2})(\d)/, '($1) $2');
      value = value.replace(/(\d{4})(\d)/, '$1-$2');
    } else {
      // Celular: (11) 91234-5678
      value = value.replace(/(\d{2})(\d)/, '($1) $2');
      value = value.replace(/(\d{5})(\d)/, '$1-$2');
    }
    
    field.value = value;
  }

  // =====================================================================
  // CONFIGURAR EVENT LISTENERS
  // =====================================================================
  function setupEventListeners() {
    // Toggle password visibility
    setupPasswordToggles();
    
    // Form submission
    document.getElementById('form-cadastro-v3').addEventListener('submit', handleFormSubmit);
    
    // Keyboard shortcuts
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' && formState.isValid && !formState.isSubmitting) {
        e.preventDefault();
        document.getElementById('btn-cadastro-v3').click();
      }
    });
  }

  // =====================================================================
  // SETUP PASSWORD TOGGLES
  // =====================================================================
  function setupPasswordToggles() {
    // Password principal
    setupSinglePasswordToggle('toggle-password', 'password', 'eye-closed', 'eye-open');
    
    // Password confirma√ß√£o
    setupSinglePasswordToggle('toggle-password-confirm', 'password_confirm', 'eye-closed-confirm', 'eye-open-confirm');
  }

  function setupSinglePasswordToggle(toggleId, fieldId, eyeClosedId, eyeOpenId) {
    const toggleBtn = document.getElementById(toggleId);
    const passwordField = document.getElementById(fieldId);
    const eyeClosed = document.getElementById(eyeClosedId);
    const eyeOpen = document.getElementById(eyeOpenId);

    if (toggleBtn && passwordField && eyeClosed && eyeOpen) {
      toggleBtn.addEventListener('click', function() {
        if (passwordField.type === 'password') {
          passwordField.type = 'text';
          eyeClosed.classList.add('hidden');
          eyeOpen.classList.remove('hidden');
        } else {
          passwordField.type = 'password';
          eyeClosed.classList.remove('hidden');
          eyeOpen.classList.add('hidden');
        }
      });
    }
  }

  // =====================================================================
  // SUBMISS√ÉO DO FORMUL√ÅRIO
  // =====================================================================
  async function handleFormSubmit(e) {
    e.preventDefault();
    
    formState.hasAttemptedSubmit = true;
    updateValidationSummary();
    
    if (formState.isSubmitting || !formState.isValid) {
      showWarning('Por favor, preencha todos os campos corretamente antes de continuar.', {
        duration: 4000
      });
      return;
    }
    
    formState.isSubmitting = true;
    setLoadingState(true);
    
    try {
      const formData = new FormData(e.target);
      const registrationData = {
        first_name: formData.get('first_name').trim(),
        last_name: formData.get('last_name').trim(),
        email: formData.get('email').trim(),
        password: formData.get('password'),
        password_confirm: formData.get('password_confirm'),
        cpf: formData.get('cpf').replace(/\D/g, ''), // Apenas n√∫meros
        telefone: formData.get('telefone') || ''
      };
      
      // Valida√ß√£o final
      if (registrationData.password !== registrationData.password_confirm) {
        throw new Error('As senhas n√£o coincidem');
      }

      // Chamar API v3
      const response = await apiClientV3.register(registrationData, {
        context: 'registration_page_v3',
        loadingMessage: 'Criando sua conta...',
        showSuccessNotification: false
      });
      
      if (response.success) {
        // Mostrar sucesso customizado
        showSuccess(`Conta criada com sucesso para ${response.user.nome_completo}! Redirecionando para login...`, {
          duration: 4000,
          title: 'Cadastro Conclu√≠do'
        });
        
        // Atualizar bot√£o com sucesso
        updateButtonSuccess();
        
        // Redirecionar para login ap√≥s delay
        setTimeout(() => {
          window.location.href = '/login?registered=true';
        }, 2500);
        
      } else {
        throw new Error(response.message || 'Erro no cadastro');
      }
      
    } catch (error) {
      console.error('[Cadastro v3] Erro no cadastro:', error);
      
      // Error handling espec√≠fico
      if (error.type === 'validation') {
        highlightFieldErrors(error.fieldErrors);
        showFormError('Corrija os campos destacados e tente novamente.');
      } else if (error.httpStatus === 400) {
        showFormError('Dados inv√°lidos. Verifique os campos preenchidos.');
      } else if (error.message?.includes('email')) {
        showFormError('Este email j√° est√° em uso. Tente fazer login ou use outro email.');
      } else if (error.message?.includes('CPF')) {
        showFormError('Este CPF j√° est√° cadastrado no sistema.');
      } else {
        showFormError('Erro ao criar conta. Tente novamente em alguns instantes.');
      }
      
    } finally {
      formState.isSubmitting = false;
      setLoadingState(false);
    }
  }

  // =====================================================================
  // ESTADOS DE LOADING
  // =====================================================================
  function setLoadingState(loading) {
    const btn = document.getElementById('btn-cadastro-v3');
    const btnText = document.getElementById('btn-text');
    const btnLoading = document.getElementById('btn-loading');
    const form = document.getElementById('form-cadastro-v3');
    
    if (loading) {
      btn.disabled = true;
      btnText.classList.add('hidden');
      btnLoading.classList.remove('hidden');
      form.classList.add('pointer-events-none', 'opacity-75');
      
      updateLoadingText();
    } else {
      btn.disabled = !formState.isValid;
      btnText.classList.remove('hidden');
      btnLoading.classList.add('hidden');
      form.classList.remove('pointer-events-none', 'opacity-75');
    }
  }

  // =====================================================================
  // ATUALIZAR TEXTO DE LOADING
  // =====================================================================
  function updateLoadingText() {
    const loadingTextEl = document.getElementById('loading-text');
    const messages = ['Criando conta...', 'Validando dados...', 'Configurando perfil...', 'Quase pronto...'];
    let index = 0;
    
    const interval = setInterval(() => {
      if (!formState.isSubmitting) {
        clearInterval(interval);
        return;
      }
      
      loadingTextEl.textContent = messages[index];
      index = (index + 1) % messages.length;
    }, 1500);
  }

  // =====================================================================
  // BOT√ÉO DE SUCESSO
  // =====================================================================
  function updateButtonSuccess() {
    const btn = document.getElementById('btn-cadastro-v3');
    const btnText = document.getElementById('btn-text');
    const btnLoading = document.getElementById('btn-loading');
    
    btn.classList.remove('bg-gradient-multibpo');
    btn.classList.add('bg-green-600');
    
    btnText.innerHTML = `
      <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
      </svg>
      Conta Criada!
    `;
    
    btnText.classList.remove('hidden');
    btnLoading.classList.add('hidden');
  }

  // =====================================================================
  // MOSTRAR ERRO NO FORMUL√ÅRIO
  // =====================================================================
  function showFormError(message) {
    const statusContainer = document.getElementById('form-status');
    const statusMessage = document.getElementById('form-status-message');
    
    statusContainer.className = 'bg-red-50 border border-red-200 rounded-lg p-3';
    statusMessage.className = 'text-sm text-red-800';
    statusMessage.textContent = message;
    statusContainer.classList.remove('hidden');
    
    // Auto-hide ap√≥s 7 segundos
    setTimeout(() => {
      statusContainer.classList.add('hidden');
    }, 7000);
  }

  // =====================================================================
  // DESTACAR ERROS DE CAMPO
  // =====================================================================
  function highlightFieldErrors(fieldErrors) {
    Object.entries(fieldErrors).forEach(([fieldName, messages]) => {
      const field = document.getElementById(fieldName);
      if (field) {
        field.classList.add('border-red-500', 'focus:ring-red-500');
        field.classList.remove('border-gray-300', 'border-green-500');
        
        const feedbackContainer = document.getElementById(`${fieldName}-feedback`);
        if (feedbackContainer) {
          feedbackContainer.className = 'mt-1 text-sm text-red-600';
          feedbackContainer.textContent = Array.isArray(messages) ? messages[0] : messages;
          feedbackContainer.classList.remove('hidden');
        }
        
        // Atualizar estado
        formState.fieldsValid[fieldName] = false;
      }
    });
    
    updateSubmitButton();
    updateValidationSummary();
  }

  // =====================================================================
  // VALIDA√á√ïES B√ÅSICAS (FALLBACK)
  // =====================================================================
  function setupBasicValidations() {
    const fields = ['first_name', 'last_name', 'email', 'cpf', 'telefone', 'password', 'password_confirm'];
    
    fields.forEach(fieldName => {
      const field = document.getElementById(fieldName);
      if (field) {
        field.addEventListener('input', () => updateFieldValidation(fieldName));
      }
    });
  }

  // =====================================================================
  // FUN√á√ïES GLOBAIS PARA MODALS
  // =====================================================================
  window.showTerms = function() {
    showWarning('Termos de uso ser√£o implementados na pr√≥xima vers√£o. Por enquanto, ao usar o sistema voc√™ concorda com o uso respons√°vel e √©tico da plataforma.', {
      duration: 6000,
      title: 'Termos de Uso'
    });
  };

  window.showPrivacy = function() {
    showWarning('Pol√≠tica de privacidade ser√° implementada na pr√≥xima vers√£o. Seus dados s√£o tratados com total seguran√ßa e confidencialidade conforme LGPD.', {
      duration: 6000,
      title: 'Pol√≠tica de Privacidade'
    });
  };

  // =====================================================================
  // FUNCIONALIDADE DE AUTO-FILL PARA DESENVOLVIMENTO
  // =====================================================================
  if (window.location.hostname === '192.168.1.4' || window.location.hostname === 'localhost') {
    setTimeout(() => {
      const form = document.getElementById('form-cadastro-v3');
      
      const autoFillBtn = document.createElement('button');
      autoFillBtn.type = 'button';
      autoFillBtn.className = 'text-xs text-gray-400 hover:text-gray-600 mt-2';
      autoFillBtn.textContent = 'üß™ Auto-fill para teste';
      autoFillBtn.onclick = () => {
        document.getElementById('first_name').value = 'Teste';
        document.getElementById('last_name').value = 'Usuario';
        document.getElementById('email').value = 'teste@multibpo.com';
        document.getElementById('cpf').value = '11144477735';
        document.getElementById('telefone').value = '(11) 99999-9999';
        document.getElementById('password').value = 'Senha123!';
        document.getElementById('password_confirm').value = 'Senha123!';
        document.getElementById('aceitar-termos').checked = true;
        
        // Trigger valida√ß√µes
        ['first_name', 'last_name', 'email', 'cpf', 'telefone', 'password', 'password_confirm', 'aceitar-termos'].forEach(field => {
          updateFieldValidation(field);
        });
        
        showSuccess('Dados de teste preenchidos!', { duration: 2000 });
      };
      
      form.appendChild(autoFillBtn);
    }, 1000);
  }
</script>

<!-- ===================================================================== -->
<!-- MELHORIAS IMPLEMENTADAS NA V3:

1. VALIDA√á√ïES EM TEMPO REAL AVAN√áADAS:
   - Feedback visual imediato para todos os campos
   - Formata√ß√£o autom√°tica de CPF e telefone
   - Valida√ß√£o de for√ßa de senha com indicador visual
   - Confirma√ß√£o de senha em tempo real
   - Checkbox de termos obrigat√≥rio

2. UX APRIMORADA:
   - Grid responsivo para layout otimizado
   - √çcones de valida√ß√£o din√¢micos
   - Mensagens espec√≠ficas por tipo de erro
   - Resumo de valida√ß√£o para campos pendentes
   - Loading states com texto progressivo

3. VALIDA√á√ïES BRASILEIRAS:
   - CPF com algoritmo de valida√ß√£o real
   - Formata√ß√£o autom√°tica durante digita√ß√£o
   - Telefone com formata√ß√£o celular/fixo
   - Campos de nome com caracteres acentuados

4. INTEGRA√á√ÉO COMPLETA:
   - apiClientV3 para requests otimizados
   - notification_system para feedback elegante
   - route_protection para seguran√ßa
   - validators para valida√ß√£o real-time

5. SEGURAN√áA E COMPLIANCE:
   - Senha forte obrigat√≥ria
   - Confirma√ß√£o de senha
   - Termos de uso obrigat√≥rios
   - Valida√ß√£o LGPD ready

6. DESENVOLVIMENTO:
   - Auto-fill para testes
   - Logs estruturados
   - Error handling robusto
   - Fallbacks para casos extremos
===================================================================== -->