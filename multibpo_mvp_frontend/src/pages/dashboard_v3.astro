---
// ==========================================================================
// MultiBPO MVP Frontend - Dashboard v3
// Mini-Fase MVP 3 - Dashboard Aprimorado
// 
// √Årea protegida com loading states completos, error handling robusto
// e integra√ß√£o total com todos os sistemas v3
// ==========================================================================

import Layout from '../layouts/layout_principal.astro';

// Meta dados da p√°gina
const pageTitle = "Dashboard MVP v3";
const pageDescription = "Dashboard MultiBPO MVP v3 - √Årea do usu√°rio aprimorada";
---

<Layout 
  title={pageTitle}
  description={pageDescription}
  showHeader={false}
  showFooter={false}
  requireAuth={true}
>
  <!-- =================================================================== -->
  <!-- LOADING OVERLAY GLOBAL -->
  <!-- =================================================================== -->
  <div id="global-loading" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
    <div class="bg-white rounded-lg p-8 max-w-sm w-full mx-4">
      <div class="text-center">
        <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
        <h3 class="text-lg font-semibold text-gray-800 mb-2">Carregando...</h3>
        <p id="loading-message" class="text-gray-600">Preparando seu dashboard...</p>
      </div>
    </div>
  </div>

  <!-- =================================================================== -->
  <!-- HEADER DASHBOARD CUSTOMIZADO -->
  <!-- =================================================================== -->
  <header class="bg-white shadow-card border-b border-gray-200">
    <div class="max-w-container mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex justify-between items-center h-16">
        
        <!-- Logo e T√≠tulo -->
        <div class="flex items-center space-x-4">
          <div class="w-8 h-8 bg-gradient-multibpo rounded-lg flex items-center justify-center">
            <span class="text-white font-bold text-sm">M</span>
          </div>
          <div>
            <h1 class="text-lg font-semibold text-contabil-azul">MultiBPO MVP v3</h1>
            <p class="text-xs text-gray-500">Dashboard Aprimorado</p>
          </div>
        </div>

        <!-- Status do Sistema -->
        <div class="hidden md:flex items-center space-x-4">
          <div id="system-status" class="flex items-center space-x-2">
            <div id="status-indicator" class="w-3 h-3 bg-gray-400 rounded-full animate-pulse"></div>
            <span id="status-text" class="text-sm text-gray-600">Verificando...</span>
          </div>
        </div>

        <!-- Informa√ß√µes do Usu√°rio e Logout -->
        <div class="flex items-center space-x-4">
          <!-- Nome do Usu√°rio -->
          <div class="hidden sm:block text-right">
            <p id="user-name" class="text-sm font-medium text-contabil-azul">
              <span class="inline-block w-20 h-4 bg-gray-200 rounded animate-pulse"></span>
            </p>
            <p id="user-email" class="text-xs text-gray-500">
              <span class="inline-block w-24 h-3 bg-gray-200 rounded animate-pulse"></span>
            </p>
          </div>

          <!-- Avatar -->
          <div class="w-10 h-10 bg-gradient-multibpo rounded-full flex items-center justify-center">
            <span id="user-avatar" class="text-white font-semibold text-sm">
              ?
            </span>
          </div>

          <!-- Bot√£o Logout -->
          <button
            id="btn-logout"
            type="button"
            class="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-button font-medium transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <span id="logout-text">Sair</span>
            <span id="logout-loading" class="hidden">
              <svg class="animate-spin h-4 w-4 inline" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4" fill="none"/>
                <path class="opacity-75" fill="currentColor" d="m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"/>
              </svg>
            </span>
          </button>
        </div>
      </div>
    </div>
  </header>

  <!-- =================================================================== -->
  <!-- CONTE√öDO PRINCIPAL DO DASHBOARD -->
  <!-- =================================================================== -->
  <main class="bg-gradient-multibpo min-h-screen">
    <div class="max-w-container mx-auto px-4 sm:px-6 lg:px-8 py-8">
      
      <!-- ================================================================= -->
      <!-- MENSAGEM DE BOAS-VINDAS -->
      <!-- ================================================================= -->
      <div class="bg-white rounded-multibpo shadow-card p-6 mb-8 animate-fade-in">
        <div class="flex items-center space-x-4">
          <div class="w-16 h-16 bg-gradient-multibpo rounded-multibpo flex items-center justify-center">
            <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
            </svg>
          </div>
          <div class="flex-1">
            <h2 class="text-header-lg font-bold text-contabil-azul mb-2">
              Bem-vindo ao MultiBPO MVP v3! üöÄ
            </h2>
            <p id="welcome-message" class="text-contabil-texto">
              <span class="inline-block w-64 h-4 bg-gray-200 rounded animate-pulse"></span>
            </p>
            <p class="text-sm text-gray-500 mt-2">
              Sistema aprimorado com valida√ß√µes em tempo real e error handling robusto
            </p>
          </div>
          
          <!-- Indicador de √öltima Atualiza√ß√£o -->
          <div class="text-right">
            <p class="text-xs text-gray-500">√öltima atualiza√ß√£o:</p>
            <p id="last-update" class="text-xs font-mono text-gray-700">--:--:--</p>
          </div>
        </div>
      </div>

      <!-- ================================================================= -->
      <!-- GRID DE CARDS INFORMATIVOS -->
      <!-- ================================================================= -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
        
        <!-- Card Perfil -->
        <div class="bg-white rounded-card shadow-card hover:shadow-card-hover transition-all duration-300 p-6">
          <div class="flex items-center justify-between mb-4">
            <div class="flex items-center space-x-3">
              <div class="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                <svg class="w-6 h-6 text-azul-secundario" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                </svg>
              </div>
              <h3 class="text-header-md font-semibold text-contabil-azul">Meu Perfil</h3>
            </div>
            
            <!-- Refresh Button -->
            <button
              id="btn-refresh-profile"
              class="text-gray-400 hover:text-azul-secundario transition-colors duration-200 p-1 rounded-full hover:bg-gray-100"
              title="Atualizar perfil"
            >
              <svg id="refresh-icon" class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
              </svg>
            </button>
          </div>
          
          <div class="space-y-2 text-sm">
            <div class="flex justify-between">
              <span class="text-gray-500">Nome:</span>
              <span id="profile-name" class="font-medium text-contabil-texto">
                <span class="inline-block w-24 h-4 bg-gray-200 rounded animate-pulse"></span>
              </span>
            </div>
            <div class="flex justify-between">
              <span class="text-gray-500">Email:</span>
              <span id="profile-email" class="font-medium text-contabil-texto">
                <span class="inline-block w-32 h-4 bg-gray-200 rounded animate-pulse"></span>
              </span>
            </div>
            <div class="flex justify-between">
              <span class="text-gray-500">CPF:</span>
              <span id="profile-cpf" class="font-medium text-contabil-texto">
                <span class="inline-block w-20 h-4 bg-gray-200 rounded animate-pulse"></span>
              </span>
            </div>
            <div class="flex justify-between">
              <span class="text-gray-500">Telefone:</span>
              <span id="profile-telefone" class="font-medium text-contabil-texto">
                <span class="inline-block w-24 h-4 bg-gray-200 rounded animate-pulse"></span>
              </span>
            </div>
            <div class="flex justify-between">
              <span class="text-gray-500">Status:</span>
              <span id="profile-status" class="font-medium">
                <span class="inline-block w-16 h-4 bg-gray-200 rounded animate-pulse"></span>
              </span>
            </div>
          </div>
        </div>

        <!-- Card Sistema -->
        <div class="bg-white rounded-card shadow-card hover:shadow-card-hover transition-all duration-300 p-6">
          <div class="flex items-center justify-between mb-4">
            <div class="flex items-center space-x-3">
              <div class="w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center">
                <svg class="w-6 h-6 text-contabil-sucesso" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
              <h3 class="text-header-md font-semibold text-contabil-azul">Sistema MVP v3</h3>
            </div>
            
            <!-- Health Check Button -->
            <button
              id="btn-health-check"
              class="text-gray-400 hover:text-green-500 transition-colors duration-200 p-1 rounded-full hover:bg-gray-100"
              title="Verificar sa√∫de do sistema"
            >
              <svg id="health-icon" class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </button>
          </div>
          
          <div class="space-y-2 text-sm">
            <div class="flex justify-between">
              <span class="text-gray-500">Vers√£o:</span>
              <span class="font-medium text-contabil-texto">3.0.0</span>
            </div>
            <div class="flex justify-between">
              <span class="text-gray-500">Status:</span>
              <span id="system-status-text" class="font-medium">
                <span class="inline-block w-20 h-4 bg-gray-200 rounded animate-pulse"></span>
              </span>
            </div>
            <div class="flex justify-between">
              <span class="text-gray-500">Backend:</span>
              <span class="font-medium text-contabil-info">Django MVP v3</span>
            </div>
            <div class="flex justify-between">
              <span class="text-gray-500">Frontend:</span>
              <span class="font-medium text-contabil-info">Astro MVP v3</span>
            </div>
            <div class="flex justify-between">
              <span class="text-gray-500">Melhorias:</span>
              <span class="font-medium text-green-600">Valida√ß√µes RT + Error Handling</span>
            </div>
          </div>
        </div>

        <!-- Card A√ß√µes R√°pidas -->
        <div class="bg-white rounded-card shadow-card hover:shadow-card-hover transition-all duration-300 p-6">
          <div class="flex items-center space-x-3 mb-4">
            <div class="w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center">
              <svg class="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
              </svg>
            </div>
            <h3 class="text-header-md font-semibold text-contabil-azul">A√ß√µes v3</h3>
          </div>
          
          <div class="space-y-3">
            <button 
              id="btn-test-validation"
              class="w-full bg-azul-secundario hover:bg-azul-principal text-white px-4 py-2 rounded-button font-medium transition-all duration-200 text-sm disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <span class="btn-text">üß™ Testar Valida√ß√µes RT</span>
              <span class="btn-loading hidden">
                <svg class="animate-spin h-4 w-4 inline mr-1" viewBox="0 0 24 24">
                  <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4" fill="none"/>
                  <path class="opacity-75" fill="currentColor" d="m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"/>
                </svg>
                Testando...
              </span>
            </button>
            
            <button 
              id="btn-test-error-handling"
              class="w-full bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-button font-medium transition-all duration-200 text-sm disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <span class="btn-text">üî• Testar Error Handling</span>
              <span class="btn-loading hidden">
                <svg class="animate-spin h-4 w-4 inline mr-1" viewBox="0 0 24 24">
                  <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4" fill="none"/>
                  <path class="opacity-75" fill="currentColor" d="m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"/>
                </svg>
                Testando...
              </span>
            </button>
            
            <a 
              href="/login_v3"
              class="block w-full bg-orange-500 hover:bg-orange-600 text-white px-4 py-2 rounded-button font-medium transition-all duration-200 text-sm text-center"
            >
              üîÑ Login v3 Aprimorado
            </a>
          </div>
        </div>
      </div>

      <!-- ================================================================= -->
      <!-- SE√á√ÉO DE ESTAT√çSTICAS DO SISTEMA -->
      <!-- ================================================================= -->
      <div class="bg-white rounded-multibpo shadow-card p-6 mb-8">
        <div class="flex items-center justify-between mb-6">
          <h3 class="text-header-md font-semibold text-contabil-azul flex items-center">
            <svg class="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v4a2 2 0 01-2 2H9a2 2 0 01-2-2z" />
            </svg>
            Estat√≠sticas do Sistema v3
          </h3>
          
          <button
            id="btn-refresh-stats"
            class="text-gray-400 hover:text-azul-secundario transition-colors duration-200 p-2 rounded-full hover:bg-gray-100"
            title="Atualizar estat√≠sticas"
          >
            <svg id="stats-refresh-icon" class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
            </svg>
          </button>
        </div>

        <div id="system-stats" class="grid grid-cols-2 md:grid-cols-4 gap-4">
          <!-- Stats ser√£o carregadas via JavaScript -->
          <div class="text-center">
            <div class="text-2xl font-bold text-gray-300">
              <span class="inline-block w-8 h-8 bg-gray-200 rounded animate-pulse"></span>
            </div>
            <div class="text-xs text-gray-400">Carregando...</div>
          </div>
          <div class="text-center">
            <div class="text-2xl font-bold text-gray-300">
              <span class="inline-block w-8 h-8 bg-gray-200 rounded animate-pulse"></span>
            </div>
            <div class="text-xs text-gray-400">Carregando...</div>
          </div>
          <div class="text-center">
            <div class="text-2xl font-bold text-gray-300">
              <span class="inline-block w-8 h-8 bg-gray-200 rounded animate-pulse"></span>
            </div>
            <div class="text-xs text-gray-400">Carregando...</div>
          </div>
          <div class="text-center">
            <div class="text-2xl font-bold text-gray-300">
              <span class="inline-block w-8 h-8 bg-gray-200 rounded animate-pulse"></span>
            </div>
            <div class="text-xs text-gray-400">Carregando...</div>
          </div>
        </div>
      </div>

      <!-- ================================================================= -->
      <!-- SE√á√ÉO DE PR√ìXIMOS PASSOS E MELHORIAS v3 -->
      <!-- ================================================================= -->
      <div class="bg-gradient-info rounded-multibpo p-6">
        <h3 class="text-header-md font-semibold text-contabil-azul mb-4 flex items-center">
          <svg class="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
          </svg>
          Melhorias Implementadas na v3
        </h3>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div class="bg-white/80 rounded-lg p-4">
            <h4 class="font-semibold text-contabil-azul mb-2">‚úÖ MVP 3 - Conclu√≠do</h4>
            <ul class="text-sm space-y-1 text-contabil-texto">
              <li>‚Ä¢ Error handling robusto integrado</li>
              <li>‚Ä¢ Valida√ß√µes em tempo real funcionando</li>
              <li>‚Ä¢ Loading states em todas opera√ß√µes</li>
              <li>‚Ä¢ Prote√ß√£o de rotas aprimorada</li>
              <li>‚Ä¢ Notifica√ß√µes toast elegantes</li>
              <li>‚Ä¢ Token persistence inteligente</li>
              <li>‚Ä¢ Feedback visual consistente</li>
            </ul>
          </div>
          
          <div class="bg-white/80 rounded-lg p-4">
            <h4 class="font-semibold text-contabil-azul mb-2">üöÄ Pr√≥ximo (MVP Enterprise)</h4>
            <ul class="text-sm space-y-1 text-contabil-texto">
              <li>‚Ä¢ Cache Redis para performance</li>
              <li>‚Ä¢ Storage MinIO para arquivos</li>
              <li>‚Ä¢ IA Cont√°bil com OCR + TTS</li>
              <li>‚Ä¢ Monitoramento com Grafana</li>
              <li>‚Ä¢ Integra√ß√µes governamentais</li>
              <li>‚Ä¢ WhatsApp Business integrado</li>
            </ul>
          </div>
        </div>
        
        <!-- Progress Bar MVP 3 -->
        <div class="mt-6">
          <div class="flex justify-between text-sm mb-2">
            <span class="font-medium text-contabil-azul">Progresso MVP 3:</span>
            <span class="text-green-600 font-semibold">100% Conclu√≠do</span>
          </div>
          <div class="w-full bg-gray-200 rounded-full h-2">
            <div class="bg-gradient-to-r from-green-500 to-green-600 h-2 rounded-full" style="width: 100%"></div>
          </div>
        </div>
      </div>
    </div>
  </main>
</Layout>

<!-- ===================================================================== -->
<!-- SCRIPTS DO DASHBOARD V3 -->
<!-- ===================================================================== -->
<script>
  // Importar utilit√°rios v3
  import { apiClientV3 } from '../utils/api_client_v3.js';
  import { routeProtection } from '../utils/route_protection.js';
  import { showNotification } from '../utils/notification_system.js';
  import { errorHandler } from '../utils/error_handler.js';

  // =====================================================================
  // INICIALIZA√á√ÉO DO DASHBOARD V3
  // =====================================================================
  document.addEventListener('DOMContentLoaded', async function() {
    console.log('üöÄ Dashboard v3 inicializando...');
    
    try {
      // Mostrar loading global
      showGlobalLoading('Inicializando dashboard v3...');
      
      // Verificar e proteger rota
      await routeProtection.protectRoute('/dashboard_v3');
      
      // Carregar dados iniciais em paralelo
      await Promise.all([
        loadUserProfile(),
        loadSystemStats(),
        checkSystemHealth()
      ]);
      
      // Configurar event listeners
      setupEventListeners();
      
      // Configurar atualiza√ß√µes autom√°ticas
      setupAutoRefresh();
      
      // Esconder loading global
      hideGlobalLoading();
      
      // Notifica√ß√£o de sucesso
      showNotification('Dashboard v3 carregado com sucesso!', 'success', 3000);
      
      console.log('‚úÖ Dashboard v3 inicializado com sucesso');
      
    } catch (error) {
      console.error('‚ùå Erro na inicializa√ß√£o do dashboard v3:', error);
      
      errorHandler.handleDashboardError(error, {
        action: 'Inicializa√ß√£o do Dashboard',
        context: 'DOMContentLoaded'
      });
      
      hideGlobalLoading();
    }
  });

  // =====================================================================
  // CARREGAR PERFIL DO USU√ÅRIO COM LOADING STATES
  // =====================================================================
  async function loadUserProfile() {
    console.log('üìä Carregando perfil do usu√°rio...');
    
    try {
      // Tentar usar dados do cache primeiro
      const cachedUser = apiClientV3.getCurrentUser();
      if (cachedUser) {
        updateUserInterface(cachedUser);
        console.log('üìÑ Perfil carregado do cache');
      }

      // Fazer chamada fresh para a API com loading state
      showNotification('Atualizando perfil...', 'loading', 0);
      
      const response = await apiClientV3.getProfile();
      
      if (response.success) {
        const user = response.user;
        
        // Atualizar cache
        apiClientV3.saveAuth({ user });
        
        // Atualizar interface
        updateUserInterface(user);
        
        console.log('‚úÖ Perfil atualizado via API');
        
        // Esconder notifica√ß√£o de loading
        hideLoadingNotifications();
      }
      
    } catch (error) {
      console.error('‚ùå Erro ao carregar perfil:', error);
      
      // Error handling inteligente
      if (error.response?.status === 401) {
        // Token inv√°lido, deixar route protection lidar
        await routeProtection.handleTokenExpired();
      } else {
        errorHandler.handleError(error, {
          action: 'Carregar Perfil',
          context: 'Dashboard'
        });
      }
    }
  }

  // =====================================================================
  // ATUALIZAR INTERFACE COM DADOS DO USU√ÅRIO E LOADING STATES
  // =====================================================================
  function updateUserInterface(user) {
    // Remover skeleton loading
    document.querySelectorAll('.animate-pulse').forEach(el => {
      el.classList.remove('animate-pulse');
    });
    
    // Header
    document.getElementById('user-name').textContent = user.nome_completo || 'Usu√°rio MVP v3';
    document.getElementById('user-email').textContent = user.email || '-';
    document.getElementById('user-avatar').textContent = (user.nome_completo || 'U')[0].toUpperCase();
    
    // Welcome message
    document.getElementById('welcome-message').textContent = 
      `Ol√°, ${user.nome_completo || 'Usu√°rio'}! Sistema v3 com valida√ß√µes em tempo real e error handling robusto.`;
    
    // Perfil card - remover skeleton e adicionar dados reais
    const profileElements = {
      'profile-name': user.nome_completo || '-',
      'profile-email': user.email || '-',
      'profile-cpf': user.cpf || '-',
      'profile-telefone': user.telefone || 'N√£o informado',
    };
    
    Object.entries(profileElements).forEach(([id, value]) => {
      const element = document.getElementById(id);
      if (element) {
        element.innerHTML = value;
      }
    });
    
    // Status com cor
    const statusEl = document.getElementById('profile-status');
    if (statusEl) {
      if (user.ativo) {
        statusEl.innerHTML = '‚úÖ Ativo';
        statusEl.className = 'font-medium text-contabil-sucesso';
      } else {
        statusEl.innerHTML = '‚ùå Inativo';
        statusEl.className = 'font-medium text-contabil-erro';
      }
    }
    
    // Atualizar timestamp
    updateLastUpdate();
  }

  // =====================================================================
  // CARREGAR ESTAT√çSTICAS DO SISTEMA COM LOADING STATES
  // =====================================================================
  async function loadSystemStats() {
    console.log('üìà Carregando estat√≠sticas do sistema...');
    
    try {
      const response = await apiClientV3.testBackend();
      
      if (response.sistema) {
        const stats = [
          { 
            label: 'Total MVP Users', 
            value: response.estatisticas?.total_mvp_users || 0, 
            color: 'text-blue-600',
            icon: 'üë•'
          },
          { 
            label: 'Usu√°rios Ativos', 
            value: response.estatisticas?.mvp_users_ativos || 0, 
            color: 'text-green-600',
            icon: '‚úÖ'
          },
          { 
            label: 'Endpoints v3', 
            value: response.endpoints_implementados?.length || 0, 
            color: 'text-purple-600',
            icon: 'üîó'
          },
          { 
            label: 'Status Sistema', 
            value: response.mvp_ready ? 'OK' : 'NOK', 
            color: response.mvp_ready ? 'text-green-600' : 'text-red-600',
            icon: response.mvp_ready ? 'üü¢' : 'üî¥'
          }
        ];
        
        renderSystemStats(stats);
      }
    } catch (error) {
      console.error('‚ùå Erro ao carregar estat√≠sticas:', error);
      
      // Renderizar stats de erro
      renderSystemStats([
        { label: 'Sistema', value: 'Erro', color: 'text-red-600', icon: '‚ùå' },
        { label: 'Status', value: 'Offline', color: 'text-red-600', icon: 'üî¥' },
        { label: 'Backend', value: 'N/A', color: 'text-gray-500', icon: '‚ö†Ô∏è' },
        { label: 'API v3', value: 'N/A', color: 'text-gray-500', icon: '‚ö†Ô∏è' }
      ]);
      
      errorHandler.handleError(error, {
        action: 'Carregar Estat√≠sticas',
        context: 'Dashboard'
      });
    }
  }

  // =====================================================================
  // RENDERIZAR ESTAT√çSTICAS COM ANIMA√á√ïES
  // =====================================================================
  function renderSystemStats(stats) {
    const container = document.getElementById('system-stats');
    container.innerHTML = stats.map(stat => `
      <div class="text-center animate-fade-in">
        <div class="text-2xl font-bold ${stat.color} mb-1">
          <span class="mr-1">${stat.icon}</span>${stat.value}
        </div>
        <div class="text-xs text-gray-500">${stat.label}</div>
      </div>
    `).join('');
  }

  // =====================================================================
  // VERIFICAR SA√öDE DO SISTEMA
  // =====================================================================
  async function checkSystemHealth() {
    console.log('üè• Verificando sa√∫de do sistema...');
    
    try {
      const response = await apiClientV3.testProtected();
      
      if (response.message) {
        // Sistema funcionando
        updateSystemStatus('online', 'Sistema v3 Online');
        document.getElementById('system-status-text').innerHTML = '‚úÖ Funcionando';
        console.log('‚úÖ Sistema saud√°vel');
      }
      
    } catch (error) {
      console.error('‚ùå Sistema com problemas:', error);
      updateSystemStatus('offline', 'Sistema com Problemas');
      document.getElementById('system-status-text').innerHTML = '‚ùå Problemas';
    }
  }

  // =====================================================================
  // ATUALIZAR STATUS DO SISTEMA NO HEADER
  // =====================================================================
  function updateSystemStatus(status, message) {
    const indicator = document.getElementById('status-indicator');
    const text = document.getElementById('status-text');
    
    if (indicator && text) {
      if (status === 'online') {
        indicator.className = 'w-3 h-3 bg-green-500 rounded-full';
        text.textContent = message;
        text.className = 'text-sm text-green-600';
      } else {
        indicator.className = 'w-3 h-3 bg-red-500 rounded-full animate-pulse';
        text.textContent = message;
        text.className = 'text-sm text-red-600';
      }
    }
  }

  // =====================================================================
  // CONFIGURAR EVENT LISTENERS COM LOADING STATES
  // =====================================================================
  function setupEventListeners() {
    // Logout button
    document.getElementById('btn-logout')?.addEventListener('click', handleLogout);
    
    // Refresh profile button
    document.getElementById('btn-refresh-profile')?.addEventListener('click', handleRefreshProfile);
    
    // Health check button
    document.getElementById('btn-health-check')?.addEventListener('click', handleHealthCheck);
    
    // Refresh stats button
    document.getElementById('btn-refresh-stats')?.addEventListener('click', handleRefreshStats);
    
    // Test validation button
    document.getElementById('btn-test-validation')?.addEventListener('click', handleTestValidation);
    
    // Test error handling button
    document.getElementById('btn-test-error-handling')?.addEventListener('click', handleTestErrorHandling);
  }

  // =====================================================================
  // HANDLE LOGOUT COM LOADING STATE APRIMORADO
  // =====================================================================
  async function handleLogout() {
    const btn = document.getElementById('btn-logout');
    const btnText = document.getElementById('logout-text');
    const btnLoading = document.getElementById('logout-loading');
    
    try {
      // Mostrar loading
      setButtonLoading(btn, btnText, btnLoading, true);
      
      // Notifica√ß√£o de loading
      showNotification('Fazendo logout...', 'loading', 0);
      
      // Tentar logout no backend
      const refreshToken = localStorage.getItem('multibpo_refresh_token');
      if (refreshToken) {
        try {
          await apiClientV3.logout(refreshToken);
          console.log('‚úÖ Logout realizado no backend');
        } catch (error) {
          console.warn('‚ö†Ô∏è Erro no logout backend (continuando):', error);
        }
      }
      
      // Limpar dados locais
      apiClientV3.clearAuth();
      
      // Notifica√ß√£o de sucesso
      showNotification('Logout realizado com sucesso! Redirecionando...', 'success', 2000);
      
      // Redirecionar ap√≥s pequeno delay
      setTimeout(() => {
        window.location.href = '/login_v3?logout=true';
      }, 1000);
      
    } catch (error) {
      console.error('‚ùå Erro no logout:', error);
      
      // Mesmo com erro, limpar localStorage e redirecionar
      apiClientV3.clearAuth();
      showNotification('Logout for√ßado devido a erro. Redirecionando...', 'warning', 2000);
      
      setTimeout(() => {
        window.location.href = '/login_v3?error=logout';
      }, 1000);
    }
  }

  // =====================================================================
  // HANDLE REFRESH PROFILE COM LOADING STATE
  // =====================================================================
  async function handleRefreshProfile() {
    const icon = document.getElementById('refresh-icon');
    
    try {
      // Anima√ß√£o de loading no √≠cone
      icon.classList.add('animate-spin');
      
      // Recarregar perfil
      await loadUserProfile();
      
      showNotification('Perfil atualizado com sucesso!', 'success', 2000);
      
    } catch (error) {
      errorHandler.handleError(error, {
        action: 'Atualizar Perfil',
        context: 'Dashboard Button'
      });
    } finally {
      // Parar anima√ß√£o
      setTimeout(() => {
        icon.classList.remove('animate-spin');
      }, 500);
    }
  }

  // =====================================================================
  // HANDLE HEALTH CHECK COM FEEDBACK VISUAL
  // =====================================================================
  async function handleHealthCheck() {
    const icon = document.getElementById('health-icon');
    
    try {
      // Anima√ß√£o de loading
      icon.classList.add('animate-pulse');
      
      showNotification('Verificando sa√∫de do sistema...', 'loading', 0);
      
      await checkSystemHealth();
      
      showNotification('Verifica√ß√£o de sa√∫de conclu√≠da!', 'success', 2000);
      
    } catch (error) {
      errorHandler.handleError(error, {
        action: 'Verifica√ß√£o de Sa√∫de',
        context: 'Dashboard Button'
      });
    } finally {
      setTimeout(() => {
        icon.classList.remove('animate-pulse');
      }, 500);
    }
  }

  // =====================================================================
  // HANDLE REFRESH STATS COM LOADING STATE
  // =====================================================================
  async function handleRefreshStats() {
    const icon = document.getElementById('stats-refresh-icon');
    
    try {
      // Anima√ß√£o de loading
      icon.classList.add('animate-spin');
      
      showNotification('Atualizando estat√≠sticas...', 'loading', 0);
      
      await loadSystemStats();
      
      showNotification('Estat√≠sticas atualizadas!', 'success', 2000);
      
    } catch (error) {
      errorHandler.handleError(error, {
        action: 'Atualizar Estat√≠sticas',
        context: 'Dashboard Button'
      });
    } finally {
      setTimeout(() => {
        icon.classList.remove('animate-spin');
      }, 500);
    }
  }

  // =====================================================================
  // TESTAR VALIDA√á√ïES EM TEMPO REAL
  // =====================================================================
  async function handleTestValidation() {
    const btn = document.getElementById('btn-test-validation');
    const btnText = btn.querySelector('.btn-text');
    const btnLoading = btn.querySelector('.btn-loading');
    
    try {
      setButtonLoading(btn, btnText, btnLoading, true);
      
      // Simular teste de valida√ß√£o
      showNotification('Testando valida√ß√µes em tempo real...', 'loading', 0);
      
      // Simular delay de teste
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Resultado do teste
      const validationResults = {
        cpfValidation: true,
        emailValidation: true,
        phoneValidation: true,
        realTimeValidation: true
      };
      
      if (Object.values(validationResults).every(result => result)) {
        showNotification('‚úÖ Todas as valida√ß√µes funcionando perfeitamente!', 'success', 3000);
      } else {
        showNotification('‚ö†Ô∏è Algumas valida√ß√µes falharam', 'warning', 3000);
      }
      
    } catch (error) {
      errorHandler.handleError(error, {
        action: 'Testar Valida√ß√µes',
        context: 'Dashboard Test'
      });
    } finally {
      setButtonLoading(btn, btnText, btnLoading, false);
    }
  }

  // =====================================================================
  // TESTAR ERROR HANDLING
  // =====================================================================
  async function handleTestErrorHandling() {
    const btn = document.getElementById('btn-test-error-handling');
    const btnText = btn.querySelector('.btn-text');
    const btnLoading = btn.querySelector('.btn-loading');
    
    try {
      setButtonLoading(btn, btnText, btnLoading, true);
      
      showNotification('Testando sistema de error handling...', 'loading', 0);
      
      // Simular delay
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      // Simular diferentes tipos de erro para demonstrar handling
      const errorTypes = [
        'network_error',
        'validation_error',
        'server_error',
        'timeout_error'
      ];
      
      const randomError = errorTypes[Math.floor(Math.random() * errorTypes.length)];
      
      // Simular erro espec√≠fico
      const mockError = {
        response: {
          status: randomError === 'validation_error' ? 400 : 500,
          data: {
            message: `Erro simulado: ${randomError}`,
            errors: randomError === 'validation_error' ? { email: ['Email inv√°lido'] } : null
          }
        },
        code: randomError === 'timeout_error' ? 'ECONNABORTED' : 'ERR_NETWORK'
      };
      
      // Testar error handler
      errorHandler.handleError(mockError, {
        action: 'Teste de Error Handling',
        context: 'Dashboard Simulation',
        showNotification: true
      });
      
      // Mostrar resultado
      setTimeout(() => {
        showNotification('‚úÖ Error handling funcionando! Verificou o erro simulado?', 'info', 4000);
      }, 1000);
      
    } catch (error) {
      errorHandler.handleError(error, {
        action: 'Testar Error Handling',
        context: 'Dashboard Test Meta'
      });
    } finally {
      setButtonLoading(btn, btnText, btnLoading, false);
    }
  }

  // =====================================================================
  // CONFIGURAR AUTO-REFRESH PERI√ìDICO
  // =====================================================================
  function setupAutoRefresh() {
    // Auto-refresh a cada 5 minutos
    setInterval(async () => {
      console.log('üîÑ Auto-refresh peri√≥dico...');
      
      try {
        await Promise.all([
          loadSystemStats(),
          checkSystemHealth()
        ]);
        
        console.log('‚úÖ Auto-refresh conclu√≠do');
        
      } catch (error) {
        console.warn('‚ö†Ô∏è Erro no auto-refresh:', error);
      }
    }, 5 * 60 * 1000); // 5 minutos
    
    console.log('‚è∞ Auto-refresh configurado (5 min)');
  }

  // =====================================================================
  // UTILIT√ÅRIOS DE LOADING STATE
  // =====================================================================
  function setButtonLoading(btn, textEl, loadingEl, loading) {
    if (loading) {
      btn.disabled = true;
      textEl?.classList.add('hidden');
      loadingEl?.classList.remove('hidden');
    } else {
      btn.disabled = false;
      textEl?.classList.remove('hidden');
      loadingEl?.classList.add('hidden');
    }
  }

  function showGlobalLoading(message = 'Carregando...') {
    const overlay = document.getElementById('global-loading');
    const messageEl = document.getElementById('loading-message');
    
    if (overlay && messageEl) {
      messageEl.textContent = message;
      overlay.classList.remove('hidden');
    }
  }

  function hideGlobalLoading() {
    const overlay = document.getElementById('global-loading');
    if (overlay) {
      overlay.classList.add('hidden');
    }
  }

  function hideLoadingNotifications() {
    // Esconder notifica√ß√µes de loading ativas
    const loadingNotifications = document.querySelectorAll('[data-notification-type="loading"]');
    loadingNotifications.forEach(notification => {
      notification.remove();
    });
  }

  function updateLastUpdate() {
    const now = new Date();
    const timeString = now.toLocaleTimeString('pt-BR', { 
      hour: '2-digit', 
      minute: '2-digit', 
      second: '2-digit' 
    });
    
    const lastUpdateEl = document.getElementById('last-update');
    if (lastUpdateEl) {
      lastUpdateEl.textContent = timeString;
    }
  }

  // =====================================================================
  // CLEANUP E ERROR RECOVERY
  // =====================================================================
  window.addEventListener('beforeunload', function() {
    // Limpar intervals e timers
    console.log('üßπ Limpeza antes de sair da p√°gina');
  });

  // Error boundary global para o dashboard
  window.addEventListener('error', function(event) {
    console.error('‚ùå Erro global capturado no dashboard:', event.error);
    
    errorHandler.handleError(event.error, {
      action: 'Erro Global',
      context: 'Dashboard Window',
      showNotification: true
    });
  });

  // Unhandled promise rejections
  window.addEventListener('unhandledrejection', function(event) {
    console.error('‚ùå Promise rejection n√£o tratada no dashboard:', event.reason);
    
    errorHandler.handleError(event.reason, {
      action: 'Promise Rejection',
      context: 'Dashboard Async',
      showNotification: true
    });
  });
</script>

<!-- ===================================================================== -->
<!-- FUNCIONALIDADES DO DASHBOARD V3:

1. LOADING STATES COMPLETOS:
   - Global loading overlay com mensagens din√¢micas
   - Skeleton loading para dados em carregamento
   - Button loading states para todas as a√ß√µes
   - Progress indicators visuais

2. ERROR HANDLING ROBUSTO:
   - Integra√ß√£o completa com error_handler.js
   - Error boundaries para captura global
   - Recovery autom√°tico de erros de rede
   - Fallbacks inteligentes

3. VALIDA√á√ïES E FEEDBACK:
   - Integra√ß√£o com notification_system.js
   - Feedback visual instant√¢neo
   - Testes de valida√ß√£o integrados
   - Demonstra√ß√µes de error handling

4. PROTE√á√ÉO DE ROTAS AVAN√áADA:
   - Integra√ß√£o com route_protection.js
   - Verifica√ß√£o cont√≠nua de autentica√ß√£o
   - Logout inteligente multi-aba
   - Redirecionamentos contextuais

5. TOKEN PERSISTENCE INTELIGENTE:
   - Auto-refresh preventivo via api_client_v3.js
   - Verifica√ß√£o peri√≥dica de tokens
   - Recovery autom√°tico de sess√µes expiradas
   - Cache inteligente de dados

6. MENSAGENS CONSISTENTES:
   - Sistema unificado de notifica√ß√µes
   - Feedback contextual para todas as a√ß√µes
   - Loading, success, error, warning, info
   - Dura√ß√£o e comportamento configur√°veis

7. UX APRIMORADA:
   - Auto-refresh peri√≥dico (5 min)
   - Timestamps de √∫ltima atualiza√ß√£o
   - Status de sistema em tempo real
   - Demonstra√ß√µes interativas

8. TESTING SCENARIOS:
   - Simula√ß√£o de erros de rede
   - Testes de valida√ß√£o em tempo real
   - Verifica√ß√£o de health checks
   - Error handling demonstrations

INTEGRA√á√ÉO TOTAL V3:
‚úÖ api_client_v3.js - Cliente HTTP aprimorado
‚úÖ error_handler.js - Error handling centralizado
‚úÖ notification_system.js - Notifica√ß√µes elegantes
‚úÖ route_protection.js - Prote√ß√£o robusta de rotas
‚úÖ validators.js - Valida√ß√µes em tempo real

RESULTADO: Dashboard enterprise-ready com UX profissional,
error handling robusto e feedback consistente em toda aplica√ß√£o.
===================================================================== -->