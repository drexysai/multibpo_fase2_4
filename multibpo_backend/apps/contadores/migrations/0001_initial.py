# Generated by Django 5.2.1 on 2025-06-02 13:19

import django.core.validators
import django.db.models.deletion
import phonenumber_field.modelfields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Escritorio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('razao_social', models.CharField(help_text='Razão social completa do escritório', max_length=200, verbose_name='Razão Social')),
                ('nome_fantasia', models.CharField(blank=True, help_text='Nome fantasia do escritório (opcional)', max_length=150, verbose_name='Nome Fantasia')),
                ('cnpj', models.CharField(help_text='CNPJ do escritório com validação automática', max_length=18, unique=True, verbose_name='CNPJ')),
                ('regime_tributario', models.CharField(choices=[('simples', 'Simples Nacional'), ('presumido', 'Lucro Presumido'), ('real', 'Lucro Real'), ('mei', 'Microempreendedor Individual')], default='simples', max_length=20, verbose_name='Regime Tributário')),
                ('cep', models.CharField(max_length=9, validators=[django.core.validators.RegexValidator(message='CEP deve estar no formato 00000-000', regex='^\\d{5}-?\\d{3}$')], verbose_name='CEP')),
                ('logradouro', models.CharField(max_length=200, verbose_name='Logradouro')),
                ('numero', models.CharField(max_length=10, verbose_name='Número')),
                ('complemento', models.CharField(blank=True, max_length=100, verbose_name='Complemento')),
                ('bairro', models.CharField(max_length=100, verbose_name='Bairro')),
                ('cidade', models.CharField(max_length=100, verbose_name='Cidade')),
                ('estado', models.CharField(max_length=2, validators=[django.core.validators.RegexValidator(message='Estado deve ter 2 letras maiúsculas (ex: SP)', regex='^[A-Z]{2}$')], verbose_name='Estado (UF)')),
                ('telefone', phonenumber_field.modelfields.PhoneNumberField(help_text='Telefone principal do escritório', max_length=128, region='BR', verbose_name='Telefone Principal')),
                ('whatsapp', phonenumber_field.modelfields.PhoneNumberField(blank=True, help_text='WhatsApp para integração futura', max_length=128, region='BR', verbose_name='WhatsApp')),
                ('email', models.EmailField(help_text='E-mail principal do escritório', max_length=254, verbose_name='E-mail Principal')),
                ('website', models.URLField(blank=True, help_text='Site do escritório (opcional)', verbose_name='Website')),
                ('responsavel_tecnico', models.CharField(help_text='Nome do contador responsável técnico', max_length=150, verbose_name='Responsável Técnico')),
                ('crc_responsavel', models.CharField(help_text='CRC do responsável técnico', max_length=15, verbose_name='CRC do Responsável')),
                ('ativo', models.BooleanField(default=True, help_text='Escritório ativo no sistema', verbose_name='Ativo')),
                ('observacoes', models.TextField(blank=True, help_text='Observações internas', verbose_name='Observações')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
            ],
            options={
                'verbose_name': 'Escritório Contábil',
                'verbose_name_plural': 'Escritórios Contábeis',
                'db_table': 'contadores_escritorio',
                'ordering': ['razao_social'],
            },
        ),
        migrations.CreateModel(
            name='Especialidade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(help_text='Nome da especialidade contábil', max_length=100, unique=True, verbose_name='Nome da Especialidade')),
                ('codigo', models.CharField(help_text='Código identificador da especialidade', max_length=10, unique=True, verbose_name='Código')),
                ('descricao', models.TextField(help_text='Descrição detalhada da especialidade', verbose_name='Descrição')),
                ('area_principal', models.CharField(choices=[('contabil', 'Contábil'), ('fiscal', 'Fiscal/Tributária'), ('trabalhista', 'Trabalhista'), ('societaria', 'Societária'), ('pericial', 'Perícia Contábil'), ('auditoria', 'Auditoria'), ('consultoria', 'Consultoria'), ('financeira', 'Financeira')], default='contabil', max_length=50, verbose_name='Área Principal')),
                ('requer_certificacao', models.BooleanField(default=False, help_text='Especialidade que requer certificação específica', verbose_name='Requer Certificação')),
                ('ativa', models.BooleanField(default=True, help_text='Especialidade disponível para seleção', verbose_name='Ativa')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
            ],
            options={
                'verbose_name': 'Especialidade Contábil',
                'verbose_name_plural': 'Especialidades Contábeis',
                'db_table': 'contadores_especialidade',
                'ordering': ['area_principal', 'nome'],
            },
        ),
        migrations.CreateModel(
            name='Contador',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome_completo', models.CharField(help_text='Nome completo do contador', max_length=150, verbose_name='Nome Completo')),
                ('cpf', models.CharField(help_text='CPF do contador com validação', max_length=14, unique=True, verbose_name='CPF')),
                ('data_nascimento', models.DateField(help_text='Data de nascimento do contador', verbose_name='Data de Nascimento')),
                ('crc', models.CharField(help_text='Registro no CRC (ex: CRC-SP 123456/O-7)', max_length=20, unique=True, verbose_name='Registro CRC')),
                ('crc_estado', models.CharField(max_length=2, validators=[django.core.validators.RegexValidator(message='Estado deve ter 2 letras maiúsculas', regex='^[A-Z]{2}$')], verbose_name='Estado do CRC')),
                ('data_registro_crc', models.DateField(help_text='Data de registro no CRC', verbose_name='Data de Registro CRC')),
                ('categoria_crc', models.CharField(choices=[('contador', 'Contador'), ('tecnico', 'Técnico em Contabilidade')], default='contador', max_length=20, verbose_name='Categoria CRC')),
                ('telefone_pessoal', phonenumber_field.modelfields.PhoneNumberField(help_text='Telefone pessoal do contador', max_length=128, region='BR', verbose_name='Telefone Pessoal')),
                ('whatsapp_pessoal', phonenumber_field.modelfields.PhoneNumberField(blank=True, help_text='WhatsApp pessoal (opcional)', max_length=128, region='BR', verbose_name='WhatsApp Pessoal')),
                ('email_pessoal', models.EmailField(blank=True, help_text='E-mail pessoal (opcional)', max_length=254, verbose_name='E-mail Pessoal')),
                ('cargo', models.CharField(choices=[('diretor', 'Diretor'), ('gerente', 'Gerente'), ('contador_senior', 'Contador Sênior'), ('contador_pleno', 'Contador Pleno'), ('contador_junior', 'Contador Júnior'), ('analista_contabil', 'Analista Contábil'), ('auxiliar_contabil', 'Auxiliar Contábil'), ('estagiario', 'Estagiário')], default='contador_pleno', max_length=100, verbose_name='Cargo')),
                ('eh_responsavel_tecnico', models.BooleanField(default=False, help_text='Este contador é responsável técnico do escritório', verbose_name='É Responsável Técnico')),
                ('pode_assinar_documentos', models.BooleanField(default=False, help_text='Contador autorizado a assinar documentos oficiais', verbose_name='Pode Assinar Documentos')),
                ('formacao', models.CharField(help_text='Curso superior e instituição', max_length=200, verbose_name='Formação Acadêmica')),
                ('pos_graduacao', models.CharField(blank=True, help_text='Cursos de pós-graduação (opcional)', max_length=200, verbose_name='Pós-Graduação')),
                ('certificacoes', models.TextField(blank=True, help_text='Certificações profissionais adicionais', verbose_name='Certificações')),
                ('ativo', models.BooleanField(default=True, help_text='Contador ativo no sistema', verbose_name='Ativo')),
                ('data_admissao', models.DateField(help_text='Data de admissão no escritório', verbose_name='Data de Admissão')),
                ('data_demissao', models.DateField(blank=True, help_text='Data de demissão (se aplicável)', null=True, verbose_name='Data de Demissão')),
                ('observacoes', models.TextField(blank=True, help_text='Observações internas sobre o contador', verbose_name='Observações')),
                ('foto', models.ImageField(blank=True, help_text='Foto do perfil do contador', null=True, upload_to='contadores/fotos/', verbose_name='Foto do Perfil')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('user', models.OneToOneField(help_text='Usuário Django vinculado ao contador', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Usuário do Sistema')),
                ('escritorio', models.ForeignKey(help_text='Escritório onde o contador trabalha', on_delete=django.db.models.deletion.PROTECT, related_name='contadores', to='contadores.escritorio', verbose_name='Escritório')),
                ('especialidades', models.ManyToManyField(blank=True, help_text='Especialidades do contador', related_name='contadores', to='contadores.especialidade', verbose_name='Especialidades')),
            ],
            options={
                'verbose_name': 'Contador',
                'verbose_name_plural': 'Contadores',
                'db_table': 'contadores_contador',
                'ordering': ['nome_completo'],
            },
        ),
    ]
