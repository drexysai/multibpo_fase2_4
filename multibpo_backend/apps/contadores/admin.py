from django.contrib import admin
from django.utils.html import format_html
from .models import Escritorio, Especialidade, Contador

# Customiza√ß√£o do cabe√ßalho do Django Admin
admin.site.site_header = "MultiBPO - Administra√ß√£o Cont√°bil"
admin.site.site_title = "MultiBPO Admin"
admin.site.index_title = "Gest√£o de Escrit√≥rios e Contadores"

# Inline para Especialidades do Contador
class ContadorEspecialidadeInline(admin.TabularInline):
    model = Contador.especialidades.through
    extra = 1
    verbose_name = "Especialidade"
    verbose_name_plural = "Especialidades do Contador"

# Admin para Escritorio - VERS√ÉO MELHORADA
@admin.register(Escritorio)
class EscritorioAdmin(admin.ModelAdmin):
    """
    Interface administrativa para gest√£o de escrit√≥rios cont√°beis
    """
    
    # Campos exibidos na listagem principal
    list_display = [
        'razao_social_display',
        'nome_fantasia', 
        'cnpj_formatado',
        'cidade_estado',
        'regime_tributario',
        'responsavel_tecnico',
        'ativo',
        'created_at_display'
    ]
    
    # Filtros laterais para navega√ß√£o
    list_filter = [
        'regime_tributario',
        'estado',
        'ativo',
        'created_at',
    ]
    
    # Campos de busca (m√∫ltiplos campos)
    search_fields = [
        'razao_social',
        'nome_fantasia', 
        'cnpj',
        'responsavel_tecnico',
        'email',
        'cidade'
    ]
    
    # Navega√ß√£o hier√°rquica por data
    date_hierarchy = 'created_at'
    
    # Campos edit√°veis diretamente na listagem
    list_editable = ['ativo']
    
    # Configura√ß√µes de pagina√ß√£o e ordena√ß√£o
    list_per_page = 25
    ordering = ['razao_social']
    
    # Organiza√ß√£o dos campos no formul√°rio com fieldsets
    fieldsets = (
        ('üìä Dados Empresariais', {
            'fields': ('razao_social', 'nome_fantasia', 'cnpj', 'regime_tributario'),
            'description': 'Informa√ß√µes b√°sicas do escrit√≥rio cont√°bil'
        }),
        ('üìç Endere√ßo Completo', {
            'fields': (
                ('cep', 'estado'),
                'logradouro',
                ('numero', 'complemento'),
                ('bairro', 'cidade')
            ),
            'classes': ('collapse',),
            'description': 'Endere√ßo completo do escrit√≥rio'
        }),
        ('üìû Dados de Contato', {
            'fields': (
                ('telefone', 'whatsapp'),
                ('email', 'website')
            ),
            'description': 'Formas de contato com o escrit√≥rio'
        }),
        ('üë®‚Äçüíº Respons√°vel T√©cnico', {
            'fields': ('responsavel_tecnico', 'crc_responsavel'),
            'description': 'Contador respons√°vel t√©cnico pelo escrit√≥rio'
        }),
        ('‚öôÔ∏è Controle e Status', {
            'fields': ('ativo', 'observacoes'),
            'classes': ('collapse',)
        }),
        ('üìÖ Informa√ß√µes do Sistema', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        })
    )
    
    # Campos somente leitura
    readonly_fields = ['created_at', 'updated_at']
    
    # M√©todos customizados para exibi√ß√£o formatada
    @admin.display(description='üè¢ Raz√£o Social', ordering='razao_social')
    def razao_social_display(self, obj):
        """Exibe raz√£o social com destaque visual"""
        if obj.nome_fantasia and obj.nome_fantasia != obj.razao_social:
            return format_html(
                '<strong>{}</strong><br><small style="color: #666;">{}</small>',
                obj.nome_fantasia,
                obj.razao_social
            )
        return format_html('<strong>{}</strong>', obj.razao_social)
    
    @admin.display(description='üìã CNPJ', ordering='cnpj')
    def cnpj_formatado(self, obj):
        """Exibe CNPJ com formata√ß√£o visual destacada"""
        return format_html(
            '<code style="background: #f0f0f0; padding: 2px 4px; border-radius: 3px;">{}</code>',
            obj.cnpj
        )
    
    @admin.display(description='üìç Localiza√ß√£o', ordering='cidade')
    def cidade_estado(self, obj):
        """Combina cidade e estado em uma coluna"""
        return format_html(
            'üìç {}/{}',
            obj.cidade, obj.estado
        )
    
    @admin.display(description='‚úÖ Ativo', ordering='ativo', boolean=True)
    def ativo_status(self, obj):
        """Exibe status ativo como √≠cone booleano"""
        return obj.ativo
    
    @admin.display(description='üìÖ Criado em', ordering='created_at')
    def created_at_display(self, obj):
        """Exibe data de cria√ß√£o formatada"""
        return obj.created_at.strftime("%d/%m/%Y")
    
    # A√ß√µes personalizadas em lote
    actions = ['ativar_escritorios', 'desativar_escritorios']
    
    @admin.action(description='‚úÖ Ativar escrit√≥rios selecionados')
    def ativar_escritorios(self, request, queryset):
        """Ativa m√∫ltiplos escrit√≥rios de uma vez"""
        updated = queryset.update(ativo=True)
        self.message_user(
            request, 
            f'{updated} escrit√≥rio(s) ativado(s) com sucesso.',
            level='SUCCESS'
        )
    
    @admin.action(description='‚ùå Desativar escrit√≥rios selecionados') 
    def desativar_escritorios(self, request, queryset):
        """Desativa m√∫ltiplos escrit√≥rios de uma vez"""
        updated = queryset.update(ativo=False)
        self.message_user(
            request, 
            f'{updated} escrit√≥rio(s) desativado(s) com sucesso.',
            level='WARNING'
        )

# Admin para Contador - VERS√ÉO MELHORADA
@admin.register(Contador)
class ContadorAdmin(admin.ModelAdmin):
    """
    Interface administrativa para gest√£o de contadores
    """
    
    list_display = [
        'nome_contador_display', 
        'crc_display', 
        'escritorio_display',
        'cargo',
        'especialidades_count',
        'ativo_status',
        'telefone_pessoal',
        'email_display'
    ]
    
    list_filter = [
        'ativo',
        'escritorio',
        'categoria_crc',
        'cargo',
        'especialidades',
        'eh_responsavel_tecnico'
    ]
    
    search_fields = [
        'nome_completo',
        'crc',
        'cpf',
        'user__username',
        'user__email',
        'user__first_name',
        'user__last_name'
    ]
    
    readonly_fields = ['created_at', 'updated_at']
    filter_horizontal = ['especialidades']
    
    fieldsets = (
        ('üë§ Informa√ß√µes Pessoais', {
            'fields': (
                'user',
                'nome_completo',
                'cpf',
                'data_nascimento'
            )
        }),
        
        ('üè¢ Dados Profissionais', {
            'fields': (
                'escritorio',
                ('crc', 'crc_estado'),
                'data_registro_crc',
                'categoria_crc',
                'cargo',
                'especialidades'
            )
        }),
        
        ('üìû Contatos', {
            'fields': (
                'telefone_pessoal',
                'whatsapp_pessoal',
                'email_pessoal'
            )
        }),
        
        ('‚öôÔ∏è Status e Permiss√µes', {
            'fields': (
                'ativo',
                'eh_responsavel_tecnico',
                'pode_assinar_documentos',
                'observacoes'
            )
        }),
        
        ('üìö Forma√ß√£o', {
            'fields': (
                'formacao',
                'pos_graduacao',
                'certificacoes'
            ),
            'classes': ('collapse',)
        }),
        
        ('üìÖ Sistema', {
            'fields': (
                'created_at',
                'updated_at'
            ),
            'classes': ('collapse',)
        })
    )
    
    # M√©todos de display customizados
    @admin.display(description='üë§ Contador', ordering='nome_completo')
    def nome_contador_display(self, obj):
        """Exibe nome do contador com status visual"""
        icon = "‚úÖ" if obj.ativo else "‚ùå"
        nome = obj.nome_completo or f"{obj.user.first_name} {obj.user.last_name}".strip()
        if not nome:
            nome = obj.user.username
        return format_html('{} <strong>{}</strong>', icon, nome)
    
    @admin.display(description='üìã CRC', ordering='crc')
    def crc_display(self, obj):
        """Exibe CRC formatado"""
        if obj.crc:
            return format_html(
                '<code style="background: #e3f2fd; padding: 2px 4px; border-radius: 3px;">{}</code>',
                obj.crc
            )
        return "‚ùå N√£o informado"
    
    @admin.display(description='üè¢ Escrit√≥rio', ordering='escritorio__razao_social')
    def escritorio_display(self, obj):
        """Exibe escrit√≥rio com link"""
        if obj.escritorio:
            return format_html(
                'üè¢ {}',
                obj.escritorio.nome_fantasia or obj.escritorio.razao_social
            )
        return "‚ùå Sem escrit√≥rio"
    
    @admin.display(description='üìö Especialidades')
    def especialidades_count(self, obj):
        """Conta especialidades do contador"""
        count = obj.especialidades.count()
        if count > 0:
            return format_html('üìö {} especialidade(s)', count)
        return "‚ùå Nenhuma"
    
    @admin.display(description='‚úÖ Ativo', ordering='ativo', boolean=True)
    def ativo_status(self, obj):
        """Status ativo do contador"""
        return obj.ativo
    
    @admin.display(description='üìß Email', ordering='user__email')
    def email_display(self, obj):
        """Email do contador"""
        return obj.email_pessoal or obj.user.email or "N√£o informado"
    
    # A√ß√µes em lote
    actions = ['ativar_contadores', 'desativar_contadores', 'aprovar_como_responsavel']
    
    @admin.action(description='‚úÖ Ativar contadores selecionados')
    def ativar_contadores(self, request, queryset):
        updated = queryset.update(ativo=True)
        self.message_user(request, f'{updated} contador(es) ativado(s).', level='SUCCESS')
    
    @admin.action(description='‚ùå Desativar contadores selecionados')
    def desativar_contadores(self, request, queryset):
        updated = queryset.update(ativo=False)
        self.message_user(request, f'{updated} contador(es) desativado(s).', level='WARNING')
    
    @admin.action(description='üë®‚Äçüíº Marcar como respons√°vel t√©cnico')
    def aprovar_como_responsavel(self, request, queryset):
        updated = queryset.update(eh_responsavel_tecnico=True, pode_assinar_documentos=True)
        self.message_user(request, f'{updated} contador(es) aprovado(s) como respons√°vel t√©cnico.', level='SUCCESS')

# Admin para Especialidade - VERS√ÉO AVAN√áADA CORRIGIDA
@admin.register(Especialidade)
class EspecialidadeAdmin(admin.ModelAdmin):
    """
    Interface administrativa para gest√£o de especialidades cont√°beis
    """
    
    # Campos exibidos na listagem principal
    list_display = [
        'nome_especialidade_display',
        'codigo_display', 
        'area_principal_display',
        'certificacao_display',
        'contadores_vinculados',
        'ativa',  # ‚Üê CORRIGIDO: usar campo original para list_editable
        'created_at_display'
    ]
    
    # Filtros laterais organizados por relev√¢ncia
    list_filter = [
        'area_principal',
        'requer_certificacao',
        'ativa',
        'created_at'
    ]
    
    # Campos de busca
    search_fields = [
        'nome',
        'codigo',
        'descricao'
    ]
    
    # Campos edit√°veis na listagem
    list_editable = ['ativa']
    
    # Configura√ß√µes de pagina√ß√£o e ordena√ß√£o
    list_per_page = 30
    ordering = ['area_principal', 'nome']
    
    # Organiza√ß√£o dos campos no formul√°rio
    fieldsets = (
        ('üìù Identifica√ß√£o da Especialidade', {
            'fields': ('nome', 'codigo', 'area_principal'),
            'description': 'Informa√ß√µes b√°sicas da especialidade cont√°bil'
        }),
        ('üìÑ Descri√ß√£o Detalhada', {
            'fields': ('descricao',),
            'description': 'Descri√ß√£o completa da especialidade e suas atribui√ß√µes'
        }),
        ('üéì Requisitos de Certifica√ß√£o', {
            'fields': ('requer_certificacao',),
            'description': 'Especialidades que exigem certifica√ß√£o espec√≠fica'
        }),
        ('‚öôÔ∏è Status da Especialidade', {
            'fields': ('ativa',),
            'description': 'Especialidade dispon√≠vel para sele√ß√£o pelos contadores'
        }),
        ('üìÖ Informa√ß√µes do Sistema', {
            'fields': ('created_at',),
            'classes': ('collapse',)
        })
    )
    
    # Campos somente leitura
    readonly_fields = ['created_at']
    
    # M√©todos customizados para exibi√ß√£o
    @admin.display(description='üìö Especialidade', ordering='nome')
    def nome_especialidade_display(self, obj):
        """Exibe nome com √≠cone por √°rea"""
        # Mapeamento de √≠cones por √°rea cont√°bil
        icon_map = {
            'contabil': 'üßÆ',
            'fiscal': 'üìã',
            'trabalhista': 'üë•',
            'societaria': 'üè¢',
            'pericial': 'üîç',
            'auditoria': '‚úÖ',
            'consultoria': 'üíº',
            'financeira': 'üí∞'
        }
        icon = icon_map.get(obj.area_principal, 'üìä')
        
        return format_html(
            '{} <strong>{}</strong>',
            icon, obj.nome
        )
    
    @admin.display(description='üîñ C√≥digo', ordering='codigo')
    def codigo_display(self, obj):
        """Exibe c√≥digo com destaque visual"""
        return format_html(
            '<code style="background: #e3f2fd; color: #1565c0; padding: 2px 6px; border-radius: 3px; font-weight: bold;">{}</code>',
            obj.codigo
        )
    
    @admin.display(description='üéØ √Årea Principal', ordering='area_principal')
    def area_principal_display(self, obj):
        """Exibe √°rea principal com cores espec√≠ficas"""
        # Mapeamento de cores por √°rea cont√°bil
        color_map = {
            'contabil': '#2e7d32',      # Verde
            'fiscal': '#d32f2f',        # Vermelho
            'trabalhista': '#f57c00',   # Laranja
            'societaria': '#303f9f',    # Azul escuro
            'pericial': '#7b1fa2',      # Roxo
            'auditoria': '#388e3c',     # Verde claro
            'consultoria': '#1976d2',   # Azul
            'financeira': '#c2185b'     # Rosa
        }
        
        color = color_map.get(obj.area_principal, '#666')
        area_display = obj.get_area_principal_display()
        
        return format_html(
            '<span style="background: {}; color: white; padding: 3px 8px; border-radius: 12px; font-size: 0.85em; font-weight: bold;">{}</span>',
            color, area_display
        )
    
    @admin.display(description='üéì Certifica√ß√£o', boolean=True)
    def certificacao_display(self, obj):
        """Exibe se requer certifica√ß√£o como √≠cone booleano"""
        return obj.requer_certificacao
    
    @admin.display(description='üë• Contadores')
    def contadores_vinculados(self, obj):
        """Mostra quantidade de contadores com esta especialidade"""
        count = obj.contadores.count()
        
        if count > 0:
            return format_html(
                '<span style="background: #e8f5e8; color: #2e7d32; padding: 2px 8px; border-radius: 10px; font-weight: bold;">üë• {}</span>',
                count
            )
        return format_html(
            '<span style="background: #ffebee; color: #c62828; padding: 2px 8px; border-radius: 10px; font-size: 0.9em;">‚ùå Nenhum</span>'
        )
    
    @admin.display(description='üìÖ Criado em', ordering='created_at')
    def created_at_display(self, obj):
        """Exibe data de cria√ß√£o formatada"""
        return obj.created_at.strftime("%d/%m/%Y")
    
    # Otimiza√ß√£o de queries para performance
    def get_queryset(self, request):
        """Otimiza consultas com prefetch_related"""
        queryset = super().get_queryset(request)
        # Prefetch contadores para evitar N+1 queries na contagem
        return queryset.prefetch_related('contadores')
    
    # A√ß√µes personalizadas em lote
    actions = [
        'ativar_especialidades', 
        'desativar_especialidades', 
        'duplicar_especialidades',
        'marcar_certificacao_obrigatoria',
        'remover_certificacao_obrigatoria'
    ]
    
    @admin.action(description='‚úÖ Ativar especialidades selecionadas')
    def ativar_especialidades(self, request, queryset):
        """Ativa m√∫ltiplas especialidades de uma vez"""
        updated = queryset.update(ativa=True)
        self.message_user(
            request, 
            f'{updated} especialidade(s) ativada(s) com sucesso.',
            level='SUCCESS'
        )
    
    @admin.action(description='‚ùå Desativar especialidades selecionadas') 
    def desativar_especialidades(self, request, queryset):
        """Desativa m√∫ltiplas especialidades de uma vez"""
        updated = queryset.update(ativa=False)
        self.message_user(
            request, 
            f'{updated} especialidade(s) desativada(s) com sucesso.',
            level='WARNING'
        )
    
    @admin.action(description='üìã Duplicar especialidades selecionadas')
    def duplicar_especialidades(self, request, queryset):
        """Duplica especialidades com sufixo (C√≥pia)"""
        duplicated_count = 0
        for obj in queryset:
            # Verificar se c√≥digo duplicado j√° existe
            original_codigo = obj.codigo
            copy_codigo = f"{original_codigo}_COPY"
            
            # Se j√° existe, adicionar n√∫mero sequencial
            counter = 1
            while Especialidade.objects.filter(codigo=copy_codigo).exists():
                copy_codigo = f"{original_codigo}_COPY_{counter}"
                counter += 1
            
            # Criar c√≥pia do objeto
            obj.pk = None  # Remove primary key para criar novo registro
            obj.nome = f"{obj.nome} (C√≥pia)"
            obj.codigo = copy_codigo
            obj.save()
            duplicated_count += 1
        
        self.message_user(
            request,
            f'{duplicated_count} especialidade(s) duplicada(s) com sucesso.',
            level='SUCCESS'
        )
    
    @admin.action(description='üéì Marcar como certifica√ß√£o obrigat√≥ria')
    def marcar_certificacao_obrigatoria(self, request, queryset):
        """Marca especialidades como exigindo certifica√ß√£o"""
        updated = queryset.update(requer_certificacao=True)
        self.message_user(
            request,
            f'{updated} especialidade(s) marcada(s) como certifica√ß√£o obrigat√≥ria.',
            level='INFO'
        )
    
    @admin.action(description='üö´ Remover obrigatoriedade de certifica√ß√£o')
    def remover_certificacao_obrigatoria(self, request, queryset):
        """Remove obrigatoriedade de certifica√ß√£o"""
        updated = queryset.update(requer_certificacao=False)
        self.message_user(
            request,
            f'{updated} especialidade(s) com certifica√ß√£o removida.',
            level='INFO'
        )